// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: telemetry.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Dronecore_Rpc_Telemetry_FixType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case noGps // = 0
  case noFix // = 1
  case fix2D // = 2
  case fix3D // = 3
  case fixDgps // = 4
  case rtkFloat // = 5
  case rtkFixed // = 6
  case UNRECOGNIZED(Int)

  init() {
    self = .noGps
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .noGps
    case 1: self = .noFix
    case 2: self = .fix2D
    case 3: self = .fix3D
    case 4: self = .fixDgps
    case 5: self = .rtkFloat
    case 6: self = .rtkFixed
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .noGps: return 0
    case .noFix: return 1
    case .fix2D: return 2
    case .fix3D: return 3
    case .fixDgps: return 4
    case .rtkFloat: return 5
    case .rtkFixed: return 6
    case .UNRECOGNIZED(let i): return i
    }
  }

}

enum Dronecore_Rpc_Telemetry_FlightMode: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknown // = 0
  case ready // = 1
  case takeoff // = 2
  case hold // = 3
  case mission // = 4
  case returnToLaunch // = 5
  case land // = 6
  case offboard // = 7
  case followMe // = 8
  case UNRECOGNIZED(Int)

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .ready
    case 2: self = .takeoff
    case 3: self = .hold
    case 4: self = .mission
    case 5: self = .returnToLaunch
    case 6: self = .land
    case 7: self = .offboard
    case 8: self = .followMe
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .ready: return 1
    case .takeoff: return 2
    case .hold: return 3
    case .mission: return 4
    case .returnToLaunch: return 5
    case .land: return 6
    case .offboard: return 7
    case .followMe: return 8
    case .UNRECOGNIZED(let i): return i
    }
  }

}

struct Dronecore_Rpc_Telemetry_SubscribePositionRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Dronecore_Rpc_Telemetry_PositionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var position: Dronecore_Rpc_Telemetry_Position {
    get {return _storage._position ?? Dronecore_Rpc_Telemetry_Position()}
    set {_uniqueStorage()._position = newValue}
  }
  /// Returns true if `position` has been explicitly set.
  var hasPosition: Bool {return _storage._position != nil}
  /// Clears the value of `position`. Subsequent reads from it will return its default value.
  mutating func clearPosition() {_storage._position = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Dronecore_Rpc_Telemetry_SubscribeHomeRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Dronecore_Rpc_Telemetry_HomeResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var home: Dronecore_Rpc_Telemetry_Position {
    get {return _storage._home ?? Dronecore_Rpc_Telemetry_Position()}
    set {_uniqueStorage()._home = newValue}
  }
  /// Returns true if `home` has been explicitly set.
  var hasHome: Bool {return _storage._home != nil}
  /// Clears the value of `home`. Subsequent reads from it will return its default value.
  mutating func clearHome() {_storage._home = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Dronecore_Rpc_Telemetry_SubscribeInAirRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Dronecore_Rpc_Telemetry_InAirResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var isInAir: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Dronecore_Rpc_Telemetry_SubscribeArmedRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Dronecore_Rpc_Telemetry_ArmedResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var isArmed: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Dronecore_Rpc_Telemetry_SubscribeAttitudeQuaternionRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Dronecore_Rpc_Telemetry_AttitudeQuaternionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var attitudeQuaternion: Dronecore_Rpc_Telemetry_Quaternion {
    get {return _storage._attitudeQuaternion ?? Dronecore_Rpc_Telemetry_Quaternion()}
    set {_uniqueStorage()._attitudeQuaternion = newValue}
  }
  /// Returns true if `attitudeQuaternion` has been explicitly set.
  var hasAttitudeQuaternion: Bool {return _storage._attitudeQuaternion != nil}
  /// Clears the value of `attitudeQuaternion`. Subsequent reads from it will return its default value.
  mutating func clearAttitudeQuaternion() {_storage._attitudeQuaternion = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Dronecore_Rpc_Telemetry_SubscribeAttitudeEulerRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Dronecore_Rpc_Telemetry_AttitudeEulerResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var attitudeEuler: Dronecore_Rpc_Telemetry_EulerAngle {
    get {return _storage._attitudeEuler ?? Dronecore_Rpc_Telemetry_EulerAngle()}
    set {_uniqueStorage()._attitudeEuler = newValue}
  }
  /// Returns true if `attitudeEuler` has been explicitly set.
  var hasAttitudeEuler: Bool {return _storage._attitudeEuler != nil}
  /// Clears the value of `attitudeEuler`. Subsequent reads from it will return its default value.
  mutating func clearAttitudeEuler() {_storage._attitudeEuler = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Dronecore_Rpc_Telemetry_SubscribeCameraAttitudeQuaternionRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Dronecore_Rpc_Telemetry_CameraAttitudeQuaternionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var attitudeQuaternion: Dronecore_Rpc_Telemetry_Quaternion {
    get {return _storage._attitudeQuaternion ?? Dronecore_Rpc_Telemetry_Quaternion()}
    set {_uniqueStorage()._attitudeQuaternion = newValue}
  }
  /// Returns true if `attitudeQuaternion` has been explicitly set.
  var hasAttitudeQuaternion: Bool {return _storage._attitudeQuaternion != nil}
  /// Clears the value of `attitudeQuaternion`. Subsequent reads from it will return its default value.
  mutating func clearAttitudeQuaternion() {_storage._attitudeQuaternion = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Dronecore_Rpc_Telemetry_SubscribeCameraAttitudeEulerRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Dronecore_Rpc_Telemetry_CameraAttitudeEulerResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var attitudeEuler: Dronecore_Rpc_Telemetry_EulerAngle {
    get {return _storage._attitudeEuler ?? Dronecore_Rpc_Telemetry_EulerAngle()}
    set {_uniqueStorage()._attitudeEuler = newValue}
  }
  /// Returns true if `attitudeEuler` has been explicitly set.
  var hasAttitudeEuler: Bool {return _storage._attitudeEuler != nil}
  /// Clears the value of `attitudeEuler`. Subsequent reads from it will return its default value.
  mutating func clearAttitudeEuler() {_storage._attitudeEuler = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Dronecore_Rpc_Telemetry_SubscribeGroundSpeedNEDRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Dronecore_Rpc_Telemetry_GroundSpeedNEDResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var groundSpeedNed: Dronecore_Rpc_Telemetry_SpeedNED {
    get {return _storage._groundSpeedNed ?? Dronecore_Rpc_Telemetry_SpeedNED()}
    set {_uniqueStorage()._groundSpeedNed = newValue}
  }
  /// Returns true if `groundSpeedNed` has been explicitly set.
  var hasGroundSpeedNed: Bool {return _storage._groundSpeedNed != nil}
  /// Clears the value of `groundSpeedNed`. Subsequent reads from it will return its default value.
  mutating func clearGroundSpeedNed() {_storage._groundSpeedNed = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Dronecore_Rpc_Telemetry_SubscribeGPSInfoRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Dronecore_Rpc_Telemetry_GPSInfoResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var gpsInfo: Dronecore_Rpc_Telemetry_GPSInfo {
    get {return _storage._gpsInfo ?? Dronecore_Rpc_Telemetry_GPSInfo()}
    set {_uniqueStorage()._gpsInfo = newValue}
  }
  /// Returns true if `gpsInfo` has been explicitly set.
  var hasGpsInfo: Bool {return _storage._gpsInfo != nil}
  /// Clears the value of `gpsInfo`. Subsequent reads from it will return its default value.
  mutating func clearGpsInfo() {_storage._gpsInfo = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Dronecore_Rpc_Telemetry_SubscribeBatteryRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Dronecore_Rpc_Telemetry_BatteryResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var battery: Dronecore_Rpc_Telemetry_Battery {
    get {return _storage._battery ?? Dronecore_Rpc_Telemetry_Battery()}
    set {_uniqueStorage()._battery = newValue}
  }
  /// Returns true if `battery` has been explicitly set.
  var hasBattery: Bool {return _storage._battery != nil}
  /// Clears the value of `battery`. Subsequent reads from it will return its default value.
  mutating func clearBattery() {_storage._battery = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Dronecore_Rpc_Telemetry_SubscribeFlightModeRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Dronecore_Rpc_Telemetry_FlightModeResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var flightMode: Dronecore_Rpc_Telemetry_FlightMode = .unknown

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Dronecore_Rpc_Telemetry_SubscribeHealthRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Dronecore_Rpc_Telemetry_HealthResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var health: Dronecore_Rpc_Telemetry_Health {
    get {return _storage._health ?? Dronecore_Rpc_Telemetry_Health()}
    set {_uniqueStorage()._health = newValue}
  }
  /// Returns true if `health` has been explicitly set.
  var hasHealth: Bool {return _storage._health != nil}
  /// Clears the value of `health`. Subsequent reads from it will return its default value.
  mutating func clearHealth() {_storage._health = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Dronecore_Rpc_Telemetry_SubscribeRCStatusRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Dronecore_Rpc_Telemetry_RCStatusResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rcStatus: Dronecore_Rpc_Telemetry_RCStatus {
    get {return _storage._rcStatus ?? Dronecore_Rpc_Telemetry_RCStatus()}
    set {_uniqueStorage()._rcStatus = newValue}
  }
  /// Returns true if `rcStatus` has been explicitly set.
  var hasRcStatus: Bool {return _storage._rcStatus != nil}
  /// Clears the value of `rcStatus`. Subsequent reads from it will return its default value.
  mutating func clearRcStatus() {_storage._rcStatus = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Dronecore_Rpc_Telemetry_Position {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var latitudeDeg: Double = 0

  var longitudeDeg: Double = 0

  var absoluteAltitudeM: Float = 0

  var relativeAltitudeM: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Dronecore_Rpc_Telemetry_Quaternion {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var w: Float = 0

  var x: Float = 0

  var y: Float = 0

  var z: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Dronecore_Rpc_Telemetry_EulerAngle {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rollDeg: Float = 0

  var pitchDeg: Float = 0

  var yawDeg: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Dronecore_Rpc_Telemetry_SpeedNED {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var velocityNorthMS: Float = 0

  var velocityEastMS: Float = 0

  var velocityDownMS: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Dronecore_Rpc_Telemetry_GPSInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var numSatellites: Int32 = 0

  var fixType: Dronecore_Rpc_Telemetry_FixType = .noGps

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Dronecore_Rpc_Telemetry_Battery {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var voltageV: Float = 0

  var remainingPercent: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Dronecore_Rpc_Telemetry_Health {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var isGyrometerCalibrationOk: Bool = false

  var isAccelerometerCalibrationOk: Bool = false

  var isMagnetometerCalibrationOk: Bool = false

  var isLevelCalibrationOk: Bool = false

  var isLocalPositionOk: Bool = false

  var isGlobalPositionOk: Bool = false

  var isHomePositionOk: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Dronecore_Rpc_Telemetry_RCStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var wasAvailableOnce: Bool = false

  var isAvailable: Bool = false

  var signalStrengthPercent: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "dronecore.rpc.telemetry"

extension Dronecore_Rpc_Telemetry_FixType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NO_GPS"),
    1: .same(proto: "NO_FIX"),
    2: .same(proto: "FIX_2D"),
    3: .same(proto: "FIX_3D"),
    4: .same(proto: "FIX_DGPS"),
    5: .same(proto: "RTK_FLOAT"),
    6: .same(proto: "RTK_FIXED"),
  ]
}

extension Dronecore_Rpc_Telemetry_FlightMode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "READY"),
    2: .same(proto: "TAKEOFF"),
    3: .same(proto: "HOLD"),
    4: .same(proto: "MISSION"),
    5: .same(proto: "RETURN_TO_LAUNCH"),
    6: .same(proto: "LAND"),
    7: .same(proto: "OFFBOARD"),
    8: .same(proto: "FOLLOW_ME"),
  ]
}

extension Dronecore_Rpc_Telemetry_SubscribePositionRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubscribePositionRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Telemetry_SubscribePositionRequest) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Telemetry_PositionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PositionResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "position"),
  ]

  fileprivate class _StorageClass {
    var _position: Dronecore_Rpc_Telemetry_Position? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _position = source._position
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._position)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._position {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Telemetry_PositionResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._position != other_storage._position {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Telemetry_SubscribeHomeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubscribeHomeRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Telemetry_SubscribeHomeRequest) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Telemetry_HomeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".HomeResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "home"),
  ]

  fileprivate class _StorageClass {
    var _home: Dronecore_Rpc_Telemetry_Position? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _home = source._home
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._home)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._home {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Telemetry_HomeResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._home != other_storage._home {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Telemetry_SubscribeInAirRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubscribeInAirRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Telemetry_SubscribeInAirRequest) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Telemetry_InAirResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".InAirResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "is_in_air"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.isInAir)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.isInAir != false {
      try visitor.visitSingularBoolField(value: self.isInAir, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Telemetry_InAirResponse) -> Bool {
    if self.isInAir != other.isInAir {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Telemetry_SubscribeArmedRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubscribeArmedRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Telemetry_SubscribeArmedRequest) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Telemetry_ArmedResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ArmedResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "is_armed"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.isArmed)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.isArmed != false {
      try visitor.visitSingularBoolField(value: self.isArmed, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Telemetry_ArmedResponse) -> Bool {
    if self.isArmed != other.isArmed {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Telemetry_SubscribeAttitudeQuaternionRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubscribeAttitudeQuaternionRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Telemetry_SubscribeAttitudeQuaternionRequest) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Telemetry_AttitudeQuaternionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AttitudeQuaternionResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "attitude_quaternion"),
  ]

  fileprivate class _StorageClass {
    var _attitudeQuaternion: Dronecore_Rpc_Telemetry_Quaternion? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _attitudeQuaternion = source._attitudeQuaternion
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._attitudeQuaternion)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._attitudeQuaternion {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Telemetry_AttitudeQuaternionResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._attitudeQuaternion != other_storage._attitudeQuaternion {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Telemetry_SubscribeAttitudeEulerRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubscribeAttitudeEulerRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Telemetry_SubscribeAttitudeEulerRequest) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Telemetry_AttitudeEulerResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AttitudeEulerResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "attitude_euler"),
  ]

  fileprivate class _StorageClass {
    var _attitudeEuler: Dronecore_Rpc_Telemetry_EulerAngle? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _attitudeEuler = source._attitudeEuler
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._attitudeEuler)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._attitudeEuler {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Telemetry_AttitudeEulerResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._attitudeEuler != other_storage._attitudeEuler {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Telemetry_SubscribeCameraAttitudeQuaternionRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubscribeCameraAttitudeQuaternionRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Telemetry_SubscribeCameraAttitudeQuaternionRequest) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Telemetry_CameraAttitudeQuaternionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CameraAttitudeQuaternionResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "attitude_quaternion"),
  ]

  fileprivate class _StorageClass {
    var _attitudeQuaternion: Dronecore_Rpc_Telemetry_Quaternion? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _attitudeQuaternion = source._attitudeQuaternion
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._attitudeQuaternion)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._attitudeQuaternion {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Telemetry_CameraAttitudeQuaternionResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._attitudeQuaternion != other_storage._attitudeQuaternion {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Telemetry_SubscribeCameraAttitudeEulerRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubscribeCameraAttitudeEulerRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Telemetry_SubscribeCameraAttitudeEulerRequest) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Telemetry_CameraAttitudeEulerResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CameraAttitudeEulerResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "attitude_euler"),
  ]

  fileprivate class _StorageClass {
    var _attitudeEuler: Dronecore_Rpc_Telemetry_EulerAngle? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _attitudeEuler = source._attitudeEuler
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._attitudeEuler)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._attitudeEuler {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Telemetry_CameraAttitudeEulerResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._attitudeEuler != other_storage._attitudeEuler {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Telemetry_SubscribeGroundSpeedNEDRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubscribeGroundSpeedNEDRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Telemetry_SubscribeGroundSpeedNEDRequest) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Telemetry_GroundSpeedNEDResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GroundSpeedNEDResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "ground_speed_ned"),
  ]

  fileprivate class _StorageClass {
    var _groundSpeedNed: Dronecore_Rpc_Telemetry_SpeedNED? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _groundSpeedNed = source._groundSpeedNed
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._groundSpeedNed)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._groundSpeedNed {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Telemetry_GroundSpeedNEDResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._groundSpeedNed != other_storage._groundSpeedNed {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Telemetry_SubscribeGPSInfoRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubscribeGPSInfoRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Telemetry_SubscribeGPSInfoRequest) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Telemetry_GPSInfoResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GPSInfoResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "gps_info"),
  ]

  fileprivate class _StorageClass {
    var _gpsInfo: Dronecore_Rpc_Telemetry_GPSInfo? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _gpsInfo = source._gpsInfo
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._gpsInfo)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._gpsInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Telemetry_GPSInfoResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._gpsInfo != other_storage._gpsInfo {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Telemetry_SubscribeBatteryRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubscribeBatteryRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Telemetry_SubscribeBatteryRequest) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Telemetry_BatteryResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BatteryResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "battery"),
  ]

  fileprivate class _StorageClass {
    var _battery: Dronecore_Rpc_Telemetry_Battery? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _battery = source._battery
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._battery)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._battery {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Telemetry_BatteryResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._battery != other_storage._battery {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Telemetry_SubscribeFlightModeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubscribeFlightModeRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Telemetry_SubscribeFlightModeRequest) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Telemetry_FlightModeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FlightModeResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "flight_mode"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.flightMode)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.flightMode != .unknown {
      try visitor.visitSingularEnumField(value: self.flightMode, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Telemetry_FlightModeResponse) -> Bool {
    if self.flightMode != other.flightMode {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Telemetry_SubscribeHealthRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubscribeHealthRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Telemetry_SubscribeHealthRequest) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Telemetry_HealthResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".HealthResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "health"),
  ]

  fileprivate class _StorageClass {
    var _health: Dronecore_Rpc_Telemetry_Health? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _health = source._health
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._health)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._health {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Telemetry_HealthResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._health != other_storage._health {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Telemetry_SubscribeRCStatusRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubscribeRCStatusRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Telemetry_SubscribeRCStatusRequest) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Telemetry_RCStatusResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RCStatusResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "rc_status"),
  ]

  fileprivate class _StorageClass {
    var _rcStatus: Dronecore_Rpc_Telemetry_RCStatus? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _rcStatus = source._rcStatus
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._rcStatus)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._rcStatus {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Telemetry_RCStatusResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._rcStatus != other_storage._rcStatus {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Telemetry_Position: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Position"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "latitude_deg"),
    2: .standard(proto: "longitude_deg"),
    3: .standard(proto: "absolute_altitude_m"),
    4: .standard(proto: "relative_altitude_m"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self.latitudeDeg)
      case 2: try decoder.decodeSingularDoubleField(value: &self.longitudeDeg)
      case 3: try decoder.decodeSingularFloatField(value: &self.absoluteAltitudeM)
      case 4: try decoder.decodeSingularFloatField(value: &self.relativeAltitudeM)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.latitudeDeg != 0 {
      try visitor.visitSingularDoubleField(value: self.latitudeDeg, fieldNumber: 1)
    }
    if self.longitudeDeg != 0 {
      try visitor.visitSingularDoubleField(value: self.longitudeDeg, fieldNumber: 2)
    }
    if self.absoluteAltitudeM != 0 {
      try visitor.visitSingularFloatField(value: self.absoluteAltitudeM, fieldNumber: 3)
    }
    if self.relativeAltitudeM != 0 {
      try visitor.visitSingularFloatField(value: self.relativeAltitudeM, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Telemetry_Position) -> Bool {
    if self.latitudeDeg != other.latitudeDeg {return false}
    if self.longitudeDeg != other.longitudeDeg {return false}
    if self.absoluteAltitudeM != other.absoluteAltitudeM {return false}
    if self.relativeAltitudeM != other.relativeAltitudeM {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Telemetry_Quaternion: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Quaternion"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "w"),
    2: .same(proto: "x"),
    3: .same(proto: "y"),
    4: .same(proto: "z"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFloatField(value: &self.w)
      case 2: try decoder.decodeSingularFloatField(value: &self.x)
      case 3: try decoder.decodeSingularFloatField(value: &self.y)
      case 4: try decoder.decodeSingularFloatField(value: &self.z)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.w != 0 {
      try visitor.visitSingularFloatField(value: self.w, fieldNumber: 1)
    }
    if self.x != 0 {
      try visitor.visitSingularFloatField(value: self.x, fieldNumber: 2)
    }
    if self.y != 0 {
      try visitor.visitSingularFloatField(value: self.y, fieldNumber: 3)
    }
    if self.z != 0 {
      try visitor.visitSingularFloatField(value: self.z, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Telemetry_Quaternion) -> Bool {
    if self.w != other.w {return false}
    if self.x != other.x {return false}
    if self.y != other.y {return false}
    if self.z != other.z {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Telemetry_EulerAngle: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EulerAngle"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "roll_deg"),
    2: .standard(proto: "pitch_deg"),
    3: .standard(proto: "yaw_deg"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFloatField(value: &self.rollDeg)
      case 2: try decoder.decodeSingularFloatField(value: &self.pitchDeg)
      case 3: try decoder.decodeSingularFloatField(value: &self.yawDeg)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.rollDeg != 0 {
      try visitor.visitSingularFloatField(value: self.rollDeg, fieldNumber: 1)
    }
    if self.pitchDeg != 0 {
      try visitor.visitSingularFloatField(value: self.pitchDeg, fieldNumber: 2)
    }
    if self.yawDeg != 0 {
      try visitor.visitSingularFloatField(value: self.yawDeg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Telemetry_EulerAngle) -> Bool {
    if self.rollDeg != other.rollDeg {return false}
    if self.pitchDeg != other.pitchDeg {return false}
    if self.yawDeg != other.yawDeg {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Telemetry_SpeedNED: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SpeedNED"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "velocity_north_m_s"),
    2: .standard(proto: "velocity_east_m_s"),
    3: .standard(proto: "velocity_down_m_s"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFloatField(value: &self.velocityNorthMS)
      case 2: try decoder.decodeSingularFloatField(value: &self.velocityEastMS)
      case 3: try decoder.decodeSingularFloatField(value: &self.velocityDownMS)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.velocityNorthMS != 0 {
      try visitor.visitSingularFloatField(value: self.velocityNorthMS, fieldNumber: 1)
    }
    if self.velocityEastMS != 0 {
      try visitor.visitSingularFloatField(value: self.velocityEastMS, fieldNumber: 2)
    }
    if self.velocityDownMS != 0 {
      try visitor.visitSingularFloatField(value: self.velocityDownMS, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Telemetry_SpeedNED) -> Bool {
    if self.velocityNorthMS != other.velocityNorthMS {return false}
    if self.velocityEastMS != other.velocityEastMS {return false}
    if self.velocityDownMS != other.velocityDownMS {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Telemetry_GPSInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GPSInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "num_satellites"),
    2: .standard(proto: "fix_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.numSatellites)
      case 2: try decoder.decodeSingularEnumField(value: &self.fixType)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.numSatellites != 0 {
      try visitor.visitSingularInt32Field(value: self.numSatellites, fieldNumber: 1)
    }
    if self.fixType != .noGps {
      try visitor.visitSingularEnumField(value: self.fixType, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Telemetry_GPSInfo) -> Bool {
    if self.numSatellites != other.numSatellites {return false}
    if self.fixType != other.fixType {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Telemetry_Battery: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Battery"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "voltage_v"),
    2: .standard(proto: "remaining_percent"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFloatField(value: &self.voltageV)
      case 2: try decoder.decodeSingularFloatField(value: &self.remainingPercent)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.voltageV != 0 {
      try visitor.visitSingularFloatField(value: self.voltageV, fieldNumber: 1)
    }
    if self.remainingPercent != 0 {
      try visitor.visitSingularFloatField(value: self.remainingPercent, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Telemetry_Battery) -> Bool {
    if self.voltageV != other.voltageV {return false}
    if self.remainingPercent != other.remainingPercent {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Telemetry_Health: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Health"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "is_gyrometer_calibration_ok"),
    2: .standard(proto: "is_accelerometer_calibration_ok"),
    3: .standard(proto: "is_magnetometer_calibration_ok"),
    4: .standard(proto: "is_level_calibration_ok"),
    5: .standard(proto: "is_local_position_ok"),
    6: .standard(proto: "is_global_position_ok"),
    7: .standard(proto: "is_home_position_ok"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.isGyrometerCalibrationOk)
      case 2: try decoder.decodeSingularBoolField(value: &self.isAccelerometerCalibrationOk)
      case 3: try decoder.decodeSingularBoolField(value: &self.isMagnetometerCalibrationOk)
      case 4: try decoder.decodeSingularBoolField(value: &self.isLevelCalibrationOk)
      case 5: try decoder.decodeSingularBoolField(value: &self.isLocalPositionOk)
      case 6: try decoder.decodeSingularBoolField(value: &self.isGlobalPositionOk)
      case 7: try decoder.decodeSingularBoolField(value: &self.isHomePositionOk)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.isGyrometerCalibrationOk != false {
      try visitor.visitSingularBoolField(value: self.isGyrometerCalibrationOk, fieldNumber: 1)
    }
    if self.isAccelerometerCalibrationOk != false {
      try visitor.visitSingularBoolField(value: self.isAccelerometerCalibrationOk, fieldNumber: 2)
    }
    if self.isMagnetometerCalibrationOk != false {
      try visitor.visitSingularBoolField(value: self.isMagnetometerCalibrationOk, fieldNumber: 3)
    }
    if self.isLevelCalibrationOk != false {
      try visitor.visitSingularBoolField(value: self.isLevelCalibrationOk, fieldNumber: 4)
    }
    if self.isLocalPositionOk != false {
      try visitor.visitSingularBoolField(value: self.isLocalPositionOk, fieldNumber: 5)
    }
    if self.isGlobalPositionOk != false {
      try visitor.visitSingularBoolField(value: self.isGlobalPositionOk, fieldNumber: 6)
    }
    if self.isHomePositionOk != false {
      try visitor.visitSingularBoolField(value: self.isHomePositionOk, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Telemetry_Health) -> Bool {
    if self.isGyrometerCalibrationOk != other.isGyrometerCalibrationOk {return false}
    if self.isAccelerometerCalibrationOk != other.isAccelerometerCalibrationOk {return false}
    if self.isMagnetometerCalibrationOk != other.isMagnetometerCalibrationOk {return false}
    if self.isLevelCalibrationOk != other.isLevelCalibrationOk {return false}
    if self.isLocalPositionOk != other.isLocalPositionOk {return false}
    if self.isGlobalPositionOk != other.isGlobalPositionOk {return false}
    if self.isHomePositionOk != other.isHomePositionOk {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Telemetry_RCStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RCStatus"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "was_available_once"),
    2: .standard(proto: "is_available"),
    3: .standard(proto: "signal_strength_percent"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.wasAvailableOnce)
      case 2: try decoder.decodeSingularBoolField(value: &self.isAvailable)
      case 3: try decoder.decodeSingularFloatField(value: &self.signalStrengthPercent)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.wasAvailableOnce != false {
      try visitor.visitSingularBoolField(value: self.wasAvailableOnce, fieldNumber: 1)
    }
    if self.isAvailable != false {
      try visitor.visitSingularBoolField(value: self.isAvailable, fieldNumber: 2)
    }
    if self.signalStrengthPercent != 0 {
      try visitor.visitSingularFloatField(value: self.signalStrengthPercent, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Telemetry_RCStatus) -> Bool {
    if self.wasAvailableOnce != other.wasAvailableOnce {return false}
    if self.isAvailable != other.isAvailable {return false}
    if self.signalStrengthPercent != other.signalStrengthPercent {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
