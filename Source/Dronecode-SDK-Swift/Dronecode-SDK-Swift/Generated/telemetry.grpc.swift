//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: telemetry.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import gRPC
import SwiftProtobuf

internal protocol Dronecore_Rpc_Telemetry_TelemetryServiceSubscribePositionCall: ClientCallServerStreaming {
  /// Call this to wait for a result. Blocking.
  func receive() throws -> Dronecore_Rpc_Telemetry_PositionResponse
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (Dronecore_Rpc_Telemetry_PositionResponse?, ClientError?) -> Void) throws
}

fileprivate final class Dronecore_Rpc_Telemetry_TelemetryServiceSubscribePositionCallBase: ClientCallServerStreamingBase<Dronecore_Rpc_Telemetry_SubscribePositionRequest, Dronecore_Rpc_Telemetry_PositionResponse>, Dronecore_Rpc_Telemetry_TelemetryServiceSubscribePositionCall {
  override class var method: String { return "/dronecore.rpc.telemetry.TelemetryService/SubscribePosition" }
}

class Dronecore_Rpc_Telemetry_TelemetryServiceSubscribePositionCallTestStub: ClientCallServerStreamingTestStub<Dronecore_Rpc_Telemetry_PositionResponse>, Dronecore_Rpc_Telemetry_TelemetryServiceSubscribePositionCall {
  override class var method: String { return "/dronecore.rpc.telemetry.TelemetryService/SubscribePosition" }
}

internal protocol Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeHomeCall: ClientCallServerStreaming {
  /// Call this to wait for a result. Blocking.
  func receive() throws -> Dronecore_Rpc_Telemetry_HomeResponse
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (Dronecore_Rpc_Telemetry_HomeResponse?, ClientError?) -> Void) throws
}

fileprivate final class Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeHomeCallBase: ClientCallServerStreamingBase<Dronecore_Rpc_Telemetry_SubscribeHomeRequest, Dronecore_Rpc_Telemetry_HomeResponse>, Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeHomeCall {
  override class var method: String { return "/dronecore.rpc.telemetry.TelemetryService/SubscribeHome" }
}

class Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeHomeCallTestStub: ClientCallServerStreamingTestStub<Dronecore_Rpc_Telemetry_HomeResponse>, Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeHomeCall {
  override class var method: String { return "/dronecore.rpc.telemetry.TelemetryService/SubscribeHome" }
}

internal protocol Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeInAirCall: ClientCallServerStreaming {
  /// Call this to wait for a result. Blocking.
  func receive() throws -> Dronecore_Rpc_Telemetry_InAirResponse
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (Dronecore_Rpc_Telemetry_InAirResponse?, ClientError?) -> Void) throws
}

fileprivate final class Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeInAirCallBase: ClientCallServerStreamingBase<Dronecore_Rpc_Telemetry_SubscribeInAirRequest, Dronecore_Rpc_Telemetry_InAirResponse>, Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeInAirCall {
  override class var method: String { return "/dronecore.rpc.telemetry.TelemetryService/SubscribeInAir" }
}

class Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeInAirCallTestStub: ClientCallServerStreamingTestStub<Dronecore_Rpc_Telemetry_InAirResponse>, Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeInAirCall {
  override class var method: String { return "/dronecore.rpc.telemetry.TelemetryService/SubscribeInAir" }
}

internal protocol Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeArmedCall: ClientCallServerStreaming {
  /// Call this to wait for a result. Blocking.
  func receive() throws -> Dronecore_Rpc_Telemetry_ArmedResponse
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (Dronecore_Rpc_Telemetry_ArmedResponse?, ClientError?) -> Void) throws
}

fileprivate final class Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeArmedCallBase: ClientCallServerStreamingBase<Dronecore_Rpc_Telemetry_SubscribeArmedRequest, Dronecore_Rpc_Telemetry_ArmedResponse>, Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeArmedCall {
  override class var method: String { return "/dronecore.rpc.telemetry.TelemetryService/SubscribeArmed" }
}

class Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeArmedCallTestStub: ClientCallServerStreamingTestStub<Dronecore_Rpc_Telemetry_ArmedResponse>, Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeArmedCall {
  override class var method: String { return "/dronecore.rpc.telemetry.TelemetryService/SubscribeArmed" }
}

internal protocol Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionCall: ClientCallServerStreaming {
  /// Call this to wait for a result. Blocking.
  func receive() throws -> Dronecore_Rpc_Telemetry_AttitudeQuaternionResponse
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (Dronecore_Rpc_Telemetry_AttitudeQuaternionResponse?, ClientError?) -> Void) throws
}

fileprivate final class Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionCallBase: ClientCallServerStreamingBase<Dronecore_Rpc_Telemetry_SubscribeAttitudeQuaternionRequest, Dronecore_Rpc_Telemetry_AttitudeQuaternionResponse>, Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionCall {
  override class var method: String { return "/dronecore.rpc.telemetry.TelemetryService/SubscribeAttitudeQuaternion" }
}

class Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionCallTestStub: ClientCallServerStreamingTestStub<Dronecore_Rpc_Telemetry_AttitudeQuaternionResponse>, Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionCall {
  override class var method: String { return "/dronecore.rpc.telemetry.TelemetryService/SubscribeAttitudeQuaternion" }
}

internal protocol Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerCall: ClientCallServerStreaming {
  /// Call this to wait for a result. Blocking.
  func receive() throws -> Dronecore_Rpc_Telemetry_AttitudeEulerResponse
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (Dronecore_Rpc_Telemetry_AttitudeEulerResponse?, ClientError?) -> Void) throws
}

fileprivate final class Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerCallBase: ClientCallServerStreamingBase<Dronecore_Rpc_Telemetry_SubscribeAttitudeEulerRequest, Dronecore_Rpc_Telemetry_AttitudeEulerResponse>, Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerCall {
  override class var method: String { return "/dronecore.rpc.telemetry.TelemetryService/SubscribeAttitudeEuler" }
}

class Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerCallTestStub: ClientCallServerStreamingTestStub<Dronecore_Rpc_Telemetry_AttitudeEulerResponse>, Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerCall {
  override class var method: String { return "/dronecore.rpc.telemetry.TelemetryService/SubscribeAttitudeEuler" }
}

internal protocol Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionCall: ClientCallServerStreaming {
  /// Call this to wait for a result. Blocking.
  func receive() throws -> Dronecore_Rpc_Telemetry_CameraAttitudeQuaternionResponse
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (Dronecore_Rpc_Telemetry_CameraAttitudeQuaternionResponse?, ClientError?) -> Void) throws
}

fileprivate final class Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionCallBase: ClientCallServerStreamingBase<Dronecore_Rpc_Telemetry_SubscribeCameraAttitudeQuaternionRequest, Dronecore_Rpc_Telemetry_CameraAttitudeQuaternionResponse>, Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionCall {
  override class var method: String { return "/dronecore.rpc.telemetry.TelemetryService/SubscribeCameraAttitudeQuaternion" }
}

class Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionCallTestStub: ClientCallServerStreamingTestStub<Dronecore_Rpc_Telemetry_CameraAttitudeQuaternionResponse>, Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionCall {
  override class var method: String { return "/dronecore.rpc.telemetry.TelemetryService/SubscribeCameraAttitudeQuaternion" }
}

internal protocol Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerCall: ClientCallServerStreaming {
  /// Call this to wait for a result. Blocking.
  func receive() throws -> Dronecore_Rpc_Telemetry_CameraAttitudeEulerResponse
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (Dronecore_Rpc_Telemetry_CameraAttitudeEulerResponse?, ClientError?) -> Void) throws
}

fileprivate final class Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerCallBase: ClientCallServerStreamingBase<Dronecore_Rpc_Telemetry_SubscribeCameraAttitudeEulerRequest, Dronecore_Rpc_Telemetry_CameraAttitudeEulerResponse>, Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerCall {
  override class var method: String { return "/dronecore.rpc.telemetry.TelemetryService/SubscribeCameraAttitudeEuler" }
}

class Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerCallTestStub: ClientCallServerStreamingTestStub<Dronecore_Rpc_Telemetry_CameraAttitudeEulerResponse>, Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerCall {
  override class var method: String { return "/dronecore.rpc.telemetry.TelemetryService/SubscribeCameraAttitudeEuler" }
}

internal protocol Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNEDCall: ClientCallServerStreaming {
  /// Call this to wait for a result. Blocking.
  func receive() throws -> Dronecore_Rpc_Telemetry_GroundSpeedNEDResponse
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (Dronecore_Rpc_Telemetry_GroundSpeedNEDResponse?, ClientError?) -> Void) throws
}

fileprivate final class Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNEDCallBase: ClientCallServerStreamingBase<Dronecore_Rpc_Telemetry_SubscribeGroundSpeedNEDRequest, Dronecore_Rpc_Telemetry_GroundSpeedNEDResponse>, Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNEDCall {
  override class var method: String { return "/dronecore.rpc.telemetry.TelemetryService/SubscribeGroundSpeedNED" }
}

class Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNEDCallTestStub: ClientCallServerStreamingTestStub<Dronecore_Rpc_Telemetry_GroundSpeedNEDResponse>, Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNEDCall {
  override class var method: String { return "/dronecore.rpc.telemetry.TelemetryService/SubscribeGroundSpeedNED" }
}

internal protocol Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeGPSInfoCall: ClientCallServerStreaming {
  /// Call this to wait for a result. Blocking.
  func receive() throws -> Dronecore_Rpc_Telemetry_GPSInfoResponse
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (Dronecore_Rpc_Telemetry_GPSInfoResponse?, ClientError?) -> Void) throws
}

fileprivate final class Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeGPSInfoCallBase: ClientCallServerStreamingBase<Dronecore_Rpc_Telemetry_SubscribeGPSInfoRequest, Dronecore_Rpc_Telemetry_GPSInfoResponse>, Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeGPSInfoCall {
  override class var method: String { return "/dronecore.rpc.telemetry.TelemetryService/SubscribeGPSInfo" }
}

class Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeGPSInfoCallTestStub: ClientCallServerStreamingTestStub<Dronecore_Rpc_Telemetry_GPSInfoResponse>, Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeGPSInfoCall {
  override class var method: String { return "/dronecore.rpc.telemetry.TelemetryService/SubscribeGPSInfo" }
}

internal protocol Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeBatteryCall: ClientCallServerStreaming {
  /// Call this to wait for a result. Blocking.
  func receive() throws -> Dronecore_Rpc_Telemetry_BatteryResponse
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (Dronecore_Rpc_Telemetry_BatteryResponse?, ClientError?) -> Void) throws
}

fileprivate final class Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeBatteryCallBase: ClientCallServerStreamingBase<Dronecore_Rpc_Telemetry_SubscribeBatteryRequest, Dronecore_Rpc_Telemetry_BatteryResponse>, Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeBatteryCall {
  override class var method: String { return "/dronecore.rpc.telemetry.TelemetryService/SubscribeBattery" }
}

class Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeBatteryCallTestStub: ClientCallServerStreamingTestStub<Dronecore_Rpc_Telemetry_BatteryResponse>, Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeBatteryCall {
  override class var method: String { return "/dronecore.rpc.telemetry.TelemetryService/SubscribeBattery" }
}

internal protocol Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeCall: ClientCallServerStreaming {
  /// Call this to wait for a result. Blocking.
  func receive() throws -> Dronecore_Rpc_Telemetry_FlightModeResponse
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (Dronecore_Rpc_Telemetry_FlightModeResponse?, ClientError?) -> Void) throws
}

fileprivate final class Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeCallBase: ClientCallServerStreamingBase<Dronecore_Rpc_Telemetry_SubscribeFlightModeRequest, Dronecore_Rpc_Telemetry_FlightModeResponse>, Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeCall {
  override class var method: String { return "/dronecore.rpc.telemetry.TelemetryService/SubscribeFlightMode" }
}

class Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeCallTestStub: ClientCallServerStreamingTestStub<Dronecore_Rpc_Telemetry_FlightModeResponse>, Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeCall {
  override class var method: String { return "/dronecore.rpc.telemetry.TelemetryService/SubscribeFlightMode" }
}

internal protocol Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeHealthCall: ClientCallServerStreaming {
  /// Call this to wait for a result. Blocking.
  func receive() throws -> Dronecore_Rpc_Telemetry_HealthResponse
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (Dronecore_Rpc_Telemetry_HealthResponse?, ClientError?) -> Void) throws
}

fileprivate final class Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeHealthCallBase: ClientCallServerStreamingBase<Dronecore_Rpc_Telemetry_SubscribeHealthRequest, Dronecore_Rpc_Telemetry_HealthResponse>, Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeHealthCall {
  override class var method: String { return "/dronecore.rpc.telemetry.TelemetryService/SubscribeHealth" }
}

class Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeHealthCallTestStub: ClientCallServerStreamingTestStub<Dronecore_Rpc_Telemetry_HealthResponse>, Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeHealthCall {
  override class var method: String { return "/dronecore.rpc.telemetry.TelemetryService/SubscribeHealth" }
}

internal protocol Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeRCStatusCall: ClientCallServerStreaming {
  /// Call this to wait for a result. Blocking.
  func receive() throws -> Dronecore_Rpc_Telemetry_RCStatusResponse
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (Dronecore_Rpc_Telemetry_RCStatusResponse?, ClientError?) -> Void) throws
}

fileprivate final class Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeRCStatusCallBase: ClientCallServerStreamingBase<Dronecore_Rpc_Telemetry_SubscribeRCStatusRequest, Dronecore_Rpc_Telemetry_RCStatusResponse>, Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeRCStatusCall {
  override class var method: String { return "/dronecore.rpc.telemetry.TelemetryService/SubscribeRCStatus" }
}

class Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeRCStatusCallTestStub: ClientCallServerStreamingTestStub<Dronecore_Rpc_Telemetry_RCStatusResponse>, Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeRCStatusCall {
  override class var method: String { return "/dronecore.rpc.telemetry.TelemetryService/SubscribeRCStatus" }
}


/// Instantiate Dronecore_Rpc_Telemetry_TelemetryServiceServiceClient, then call methods of this protocol to make API calls.
internal protocol Dronecore_Rpc_Telemetry_TelemetryServiceService: ServiceClient {
  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribeposition(_ request: Dronecore_Rpc_Telemetry_SubscribePositionRequest, completion: ((CallResult) -> Void)?) throws -> Dronecore_Rpc_Telemetry_TelemetryServiceSubscribePositionCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribehome(_ request: Dronecore_Rpc_Telemetry_SubscribeHomeRequest, completion: ((CallResult) -> Void)?) throws -> Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeHomeCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribeinair(_ request: Dronecore_Rpc_Telemetry_SubscribeInAirRequest, completion: ((CallResult) -> Void)?) throws -> Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeInAirCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribearmed(_ request: Dronecore_Rpc_Telemetry_SubscribeArmedRequest, completion: ((CallResult) -> Void)?) throws -> Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeArmedCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribeattitudequaternion(_ request: Dronecore_Rpc_Telemetry_SubscribeAttitudeQuaternionRequest, completion: ((CallResult) -> Void)?) throws -> Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribeattitudeeuler(_ request: Dronecore_Rpc_Telemetry_SubscribeAttitudeEulerRequest, completion: ((CallResult) -> Void)?) throws -> Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribecameraattitudequaternion(_ request: Dronecore_Rpc_Telemetry_SubscribeCameraAttitudeQuaternionRequest, completion: ((CallResult) -> Void)?) throws -> Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribecameraattitudeeuler(_ request: Dronecore_Rpc_Telemetry_SubscribeCameraAttitudeEulerRequest, completion: ((CallResult) -> Void)?) throws -> Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribegroundspeedned(_ request: Dronecore_Rpc_Telemetry_SubscribeGroundSpeedNEDRequest, completion: ((CallResult) -> Void)?) throws -> Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNEDCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribegpsinfo(_ request: Dronecore_Rpc_Telemetry_SubscribeGPSInfoRequest, completion: ((CallResult) -> Void)?) throws -> Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeGPSInfoCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribebattery(_ request: Dronecore_Rpc_Telemetry_SubscribeBatteryRequest, completion: ((CallResult) -> Void)?) throws -> Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeBatteryCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribeflightmode(_ request: Dronecore_Rpc_Telemetry_SubscribeFlightModeRequest, completion: ((CallResult) -> Void)?) throws -> Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribehealth(_ request: Dronecore_Rpc_Telemetry_SubscribeHealthRequest, completion: ((CallResult) -> Void)?) throws -> Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeHealthCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribercstatus(_ request: Dronecore_Rpc_Telemetry_SubscribeRCStatusRequest, completion: ((CallResult) -> Void)?) throws -> Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeRCStatusCall

}

internal final class Dronecore_Rpc_Telemetry_TelemetryServiceServiceClient: ServiceClientBase, Dronecore_Rpc_Telemetry_TelemetryServiceService {
  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribeposition(_ request: Dronecore_Rpc_Telemetry_SubscribePositionRequest, completion: ((CallResult) -> Void)?) throws -> Dronecore_Rpc_Telemetry_TelemetryServiceSubscribePositionCall {
    return try Dronecore_Rpc_Telemetry_TelemetryServiceSubscribePositionCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribehome(_ request: Dronecore_Rpc_Telemetry_SubscribeHomeRequest, completion: ((CallResult) -> Void)?) throws -> Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeHomeCall {
    return try Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeHomeCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribeinair(_ request: Dronecore_Rpc_Telemetry_SubscribeInAirRequest, completion: ((CallResult) -> Void)?) throws -> Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeInAirCall {
    return try Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeInAirCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribearmed(_ request: Dronecore_Rpc_Telemetry_SubscribeArmedRequest, completion: ((CallResult) -> Void)?) throws -> Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeArmedCall {
    return try Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeArmedCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribeattitudequaternion(_ request: Dronecore_Rpc_Telemetry_SubscribeAttitudeQuaternionRequest, completion: ((CallResult) -> Void)?) throws -> Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionCall {
    return try Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribeattitudeeuler(_ request: Dronecore_Rpc_Telemetry_SubscribeAttitudeEulerRequest, completion: ((CallResult) -> Void)?) throws -> Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerCall {
    return try Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribecameraattitudequaternion(_ request: Dronecore_Rpc_Telemetry_SubscribeCameraAttitudeQuaternionRequest, completion: ((CallResult) -> Void)?) throws -> Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionCall {
    return try Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribecameraattitudeeuler(_ request: Dronecore_Rpc_Telemetry_SubscribeCameraAttitudeEulerRequest, completion: ((CallResult) -> Void)?) throws -> Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerCall {
    return try Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribegroundspeedned(_ request: Dronecore_Rpc_Telemetry_SubscribeGroundSpeedNEDRequest, completion: ((CallResult) -> Void)?) throws -> Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNEDCall {
    return try Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNEDCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribegpsinfo(_ request: Dronecore_Rpc_Telemetry_SubscribeGPSInfoRequest, completion: ((CallResult) -> Void)?) throws -> Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeGPSInfoCall {
    return try Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeGPSInfoCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribebattery(_ request: Dronecore_Rpc_Telemetry_SubscribeBatteryRequest, completion: ((CallResult) -> Void)?) throws -> Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeBatteryCall {
    return try Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeBatteryCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribeflightmode(_ request: Dronecore_Rpc_Telemetry_SubscribeFlightModeRequest, completion: ((CallResult) -> Void)?) throws -> Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeCall {
    return try Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribehealth(_ request: Dronecore_Rpc_Telemetry_SubscribeHealthRequest, completion: ((CallResult) -> Void)?) throws -> Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeHealthCall {
    return try Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeHealthCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribercstatus(_ request: Dronecore_Rpc_Telemetry_SubscribeRCStatusRequest, completion: ((CallResult) -> Void)?) throws -> Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeRCStatusCall {
    return try Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeRCStatusCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

}

class Dronecore_Rpc_Telemetry_TelemetryServiceServiceTestStub: ServiceClientTestStubBase, Dronecore_Rpc_Telemetry_TelemetryServiceService {
  var subscribepositionRequests: [Dronecore_Rpc_Telemetry_SubscribePositionRequest] = []
  var subscribepositionCalls: [Dronecore_Rpc_Telemetry_TelemetryServiceSubscribePositionCall] = []
  func subscribeposition(_ request: Dronecore_Rpc_Telemetry_SubscribePositionRequest, completion: ((CallResult) -> Void)?) throws -> Dronecore_Rpc_Telemetry_TelemetryServiceSubscribePositionCall {
    subscribepositionRequests.append(request)
    defer { subscribepositionCalls.removeFirst() }
    return subscribepositionCalls.first!
  }

  var subscribehomeRequests: [Dronecore_Rpc_Telemetry_SubscribeHomeRequest] = []
  var subscribehomeCalls: [Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeHomeCall] = []
  func subscribehome(_ request: Dronecore_Rpc_Telemetry_SubscribeHomeRequest, completion: ((CallResult) -> Void)?) throws -> Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeHomeCall {
    subscribehomeRequests.append(request)
    defer { subscribehomeCalls.removeFirst() }
    return subscribehomeCalls.first!
  }

  var subscribeinairRequests: [Dronecore_Rpc_Telemetry_SubscribeInAirRequest] = []
  var subscribeinairCalls: [Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeInAirCall] = []
  func subscribeinair(_ request: Dronecore_Rpc_Telemetry_SubscribeInAirRequest, completion: ((CallResult) -> Void)?) throws -> Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeInAirCall {
    subscribeinairRequests.append(request)
    defer { subscribeinairCalls.removeFirst() }
    return subscribeinairCalls.first!
  }

  var subscribearmedRequests: [Dronecore_Rpc_Telemetry_SubscribeArmedRequest] = []
  var subscribearmedCalls: [Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeArmedCall] = []
  func subscribearmed(_ request: Dronecore_Rpc_Telemetry_SubscribeArmedRequest, completion: ((CallResult) -> Void)?) throws -> Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeArmedCall {
    subscribearmedRequests.append(request)
    defer { subscribearmedCalls.removeFirst() }
    return subscribearmedCalls.first!
  }

  var subscribeattitudequaternionRequests: [Dronecore_Rpc_Telemetry_SubscribeAttitudeQuaternionRequest] = []
  var subscribeattitudequaternionCalls: [Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionCall] = []
  func subscribeattitudequaternion(_ request: Dronecore_Rpc_Telemetry_SubscribeAttitudeQuaternionRequest, completion: ((CallResult) -> Void)?) throws -> Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionCall {
    subscribeattitudequaternionRequests.append(request)
    defer { subscribeattitudequaternionCalls.removeFirst() }
    return subscribeattitudequaternionCalls.first!
  }

  var subscribeattitudeeulerRequests: [Dronecore_Rpc_Telemetry_SubscribeAttitudeEulerRequest] = []
  var subscribeattitudeeulerCalls: [Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerCall] = []
  func subscribeattitudeeuler(_ request: Dronecore_Rpc_Telemetry_SubscribeAttitudeEulerRequest, completion: ((CallResult) -> Void)?) throws -> Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerCall {
    subscribeattitudeeulerRequests.append(request)
    defer { subscribeattitudeeulerCalls.removeFirst() }
    return subscribeattitudeeulerCalls.first!
  }

  var subscribecameraattitudequaternionRequests: [Dronecore_Rpc_Telemetry_SubscribeCameraAttitudeQuaternionRequest] = []
  var subscribecameraattitudequaternionCalls: [Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionCall] = []
  func subscribecameraattitudequaternion(_ request: Dronecore_Rpc_Telemetry_SubscribeCameraAttitudeQuaternionRequest, completion: ((CallResult) -> Void)?) throws -> Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionCall {
    subscribecameraattitudequaternionRequests.append(request)
    defer { subscribecameraattitudequaternionCalls.removeFirst() }
    return subscribecameraattitudequaternionCalls.first!
  }

  var subscribecameraattitudeeulerRequests: [Dronecore_Rpc_Telemetry_SubscribeCameraAttitudeEulerRequest] = []
  var subscribecameraattitudeeulerCalls: [Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerCall] = []
  func subscribecameraattitudeeuler(_ request: Dronecore_Rpc_Telemetry_SubscribeCameraAttitudeEulerRequest, completion: ((CallResult) -> Void)?) throws -> Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerCall {
    subscribecameraattitudeeulerRequests.append(request)
    defer { subscribecameraattitudeeulerCalls.removeFirst() }
    return subscribecameraattitudeeulerCalls.first!
  }

  var subscribegroundspeednedRequests: [Dronecore_Rpc_Telemetry_SubscribeGroundSpeedNEDRequest] = []
  var subscribegroundspeednedCalls: [Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNEDCall] = []
  func subscribegroundspeedned(_ request: Dronecore_Rpc_Telemetry_SubscribeGroundSpeedNEDRequest, completion: ((CallResult) -> Void)?) throws -> Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNEDCall {
    subscribegroundspeednedRequests.append(request)
    defer { subscribegroundspeednedCalls.removeFirst() }
    return subscribegroundspeednedCalls.first!
  }

  var subscribegpsinfoRequests: [Dronecore_Rpc_Telemetry_SubscribeGPSInfoRequest] = []
  var subscribegpsinfoCalls: [Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeGPSInfoCall] = []
  func subscribegpsinfo(_ request: Dronecore_Rpc_Telemetry_SubscribeGPSInfoRequest, completion: ((CallResult) -> Void)?) throws -> Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeGPSInfoCall {
    subscribegpsinfoRequests.append(request)
    defer { subscribegpsinfoCalls.removeFirst() }
    return subscribegpsinfoCalls.first!
  }

  var subscribebatteryRequests: [Dronecore_Rpc_Telemetry_SubscribeBatteryRequest] = []
  var subscribebatteryCalls: [Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeBatteryCall] = []
  func subscribebattery(_ request: Dronecore_Rpc_Telemetry_SubscribeBatteryRequest, completion: ((CallResult) -> Void)?) throws -> Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeBatteryCall {
    subscribebatteryRequests.append(request)
    defer { subscribebatteryCalls.removeFirst() }
    return subscribebatteryCalls.first!
  }

  var subscribeflightmodeRequests: [Dronecore_Rpc_Telemetry_SubscribeFlightModeRequest] = []
  var subscribeflightmodeCalls: [Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeCall] = []
  func subscribeflightmode(_ request: Dronecore_Rpc_Telemetry_SubscribeFlightModeRequest, completion: ((CallResult) -> Void)?) throws -> Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeCall {
    subscribeflightmodeRequests.append(request)
    defer { subscribeflightmodeCalls.removeFirst() }
    return subscribeflightmodeCalls.first!
  }

  var subscribehealthRequests: [Dronecore_Rpc_Telemetry_SubscribeHealthRequest] = []
  var subscribehealthCalls: [Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeHealthCall] = []
  func subscribehealth(_ request: Dronecore_Rpc_Telemetry_SubscribeHealthRequest, completion: ((CallResult) -> Void)?) throws -> Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeHealthCall {
    subscribehealthRequests.append(request)
    defer { subscribehealthCalls.removeFirst() }
    return subscribehealthCalls.first!
  }

  var subscribercstatusRequests: [Dronecore_Rpc_Telemetry_SubscribeRCStatusRequest] = []
  var subscribercstatusCalls: [Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeRCStatusCall] = []
  func subscribercstatus(_ request: Dronecore_Rpc_Telemetry_SubscribeRCStatusRequest, completion: ((CallResult) -> Void)?) throws -> Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeRCStatusCall {
    subscribercstatusRequests.append(request)
    defer { subscribercstatusCalls.removeFirst() }
    return subscribercstatusCalls.first!
  }

}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Dronecore_Rpc_Telemetry_TelemetryServiceProvider {
  func subscribeposition(request: Dronecore_Rpc_Telemetry_SubscribePositionRequest, session: Dronecore_Rpc_Telemetry_TelemetryServiceSubscribePositionSession) throws
  func subscribehome(request: Dronecore_Rpc_Telemetry_SubscribeHomeRequest, session: Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeHomeSession) throws
  func subscribeinair(request: Dronecore_Rpc_Telemetry_SubscribeInAirRequest, session: Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeInAirSession) throws
  func subscribearmed(request: Dronecore_Rpc_Telemetry_SubscribeArmedRequest, session: Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeArmedSession) throws
  func subscribeattitudequaternion(request: Dronecore_Rpc_Telemetry_SubscribeAttitudeQuaternionRequest, session: Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionSession) throws
  func subscribeattitudeeuler(request: Dronecore_Rpc_Telemetry_SubscribeAttitudeEulerRequest, session: Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerSession) throws
  func subscribecameraattitudequaternion(request: Dronecore_Rpc_Telemetry_SubscribeCameraAttitudeQuaternionRequest, session: Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionSession) throws
  func subscribecameraattitudeeuler(request: Dronecore_Rpc_Telemetry_SubscribeCameraAttitudeEulerRequest, session: Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerSession) throws
  func subscribegroundspeedned(request: Dronecore_Rpc_Telemetry_SubscribeGroundSpeedNEDRequest, session: Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNEDSession) throws
  func subscribegpsinfo(request: Dronecore_Rpc_Telemetry_SubscribeGPSInfoRequest, session: Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeGPSInfoSession) throws
  func subscribebattery(request: Dronecore_Rpc_Telemetry_SubscribeBatteryRequest, session: Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeBatterySession) throws
  func subscribeflightmode(request: Dronecore_Rpc_Telemetry_SubscribeFlightModeRequest, session: Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeSession) throws
  func subscribehealth(request: Dronecore_Rpc_Telemetry_SubscribeHealthRequest, session: Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeHealthSession) throws
  func subscribercstatus(request: Dronecore_Rpc_Telemetry_SubscribeRCStatusRequest, session: Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeRCStatusSession) throws
}

internal protocol Dronecore_Rpc_Telemetry_TelemetryServiceSubscribePositionSession: ServerSessionServerStreaming {
  /// Send a message. Nonblocking.
  func send(_ response: Dronecore_Rpc_Telemetry_PositionResponse, completion: ((Bool) -> Void)?) throws
}

fileprivate final class Dronecore_Rpc_Telemetry_TelemetryServiceSubscribePositionSessionBase: ServerSessionServerStreamingBase<Dronecore_Rpc_Telemetry_SubscribePositionRequest, Dronecore_Rpc_Telemetry_PositionResponse>, Dronecore_Rpc_Telemetry_TelemetryServiceSubscribePositionSession {}

class Dronecore_Rpc_Telemetry_TelemetryServiceSubscribePositionSessionTestStub: ServerSessionServerStreamingTestStub<Dronecore_Rpc_Telemetry_PositionResponse>, Dronecore_Rpc_Telemetry_TelemetryServiceSubscribePositionSession {}

internal protocol Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeHomeSession: ServerSessionServerStreaming {
  /// Send a message. Nonblocking.
  func send(_ response: Dronecore_Rpc_Telemetry_HomeResponse, completion: ((Bool) -> Void)?) throws
}

fileprivate final class Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeHomeSessionBase: ServerSessionServerStreamingBase<Dronecore_Rpc_Telemetry_SubscribeHomeRequest, Dronecore_Rpc_Telemetry_HomeResponse>, Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeHomeSession {}

class Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeHomeSessionTestStub: ServerSessionServerStreamingTestStub<Dronecore_Rpc_Telemetry_HomeResponse>, Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeHomeSession {}

internal protocol Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeInAirSession: ServerSessionServerStreaming {
  /// Send a message. Nonblocking.
  func send(_ response: Dronecore_Rpc_Telemetry_InAirResponse, completion: ((Bool) -> Void)?) throws
}

fileprivate final class Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeInAirSessionBase: ServerSessionServerStreamingBase<Dronecore_Rpc_Telemetry_SubscribeInAirRequest, Dronecore_Rpc_Telemetry_InAirResponse>, Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeInAirSession {}

class Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeInAirSessionTestStub: ServerSessionServerStreamingTestStub<Dronecore_Rpc_Telemetry_InAirResponse>, Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeInAirSession {}

internal protocol Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeArmedSession: ServerSessionServerStreaming {
  /// Send a message. Nonblocking.
  func send(_ response: Dronecore_Rpc_Telemetry_ArmedResponse, completion: ((Bool) -> Void)?) throws
}

fileprivate final class Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeArmedSessionBase: ServerSessionServerStreamingBase<Dronecore_Rpc_Telemetry_SubscribeArmedRequest, Dronecore_Rpc_Telemetry_ArmedResponse>, Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeArmedSession {}

class Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeArmedSessionTestStub: ServerSessionServerStreamingTestStub<Dronecore_Rpc_Telemetry_ArmedResponse>, Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeArmedSession {}

internal protocol Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionSession: ServerSessionServerStreaming {
  /// Send a message. Nonblocking.
  func send(_ response: Dronecore_Rpc_Telemetry_AttitudeQuaternionResponse, completion: ((Bool) -> Void)?) throws
}

fileprivate final class Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionSessionBase: ServerSessionServerStreamingBase<Dronecore_Rpc_Telemetry_SubscribeAttitudeQuaternionRequest, Dronecore_Rpc_Telemetry_AttitudeQuaternionResponse>, Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionSession {}

class Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionSessionTestStub: ServerSessionServerStreamingTestStub<Dronecore_Rpc_Telemetry_AttitudeQuaternionResponse>, Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionSession {}

internal protocol Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerSession: ServerSessionServerStreaming {
  /// Send a message. Nonblocking.
  func send(_ response: Dronecore_Rpc_Telemetry_AttitudeEulerResponse, completion: ((Bool) -> Void)?) throws
}

fileprivate final class Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerSessionBase: ServerSessionServerStreamingBase<Dronecore_Rpc_Telemetry_SubscribeAttitudeEulerRequest, Dronecore_Rpc_Telemetry_AttitudeEulerResponse>, Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerSession {}

class Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerSessionTestStub: ServerSessionServerStreamingTestStub<Dronecore_Rpc_Telemetry_AttitudeEulerResponse>, Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerSession {}

internal protocol Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionSession: ServerSessionServerStreaming {
  /// Send a message. Nonblocking.
  func send(_ response: Dronecore_Rpc_Telemetry_CameraAttitudeQuaternionResponse, completion: ((Bool) -> Void)?) throws
}

fileprivate final class Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionSessionBase: ServerSessionServerStreamingBase<Dronecore_Rpc_Telemetry_SubscribeCameraAttitudeQuaternionRequest, Dronecore_Rpc_Telemetry_CameraAttitudeQuaternionResponse>, Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionSession {}

class Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionSessionTestStub: ServerSessionServerStreamingTestStub<Dronecore_Rpc_Telemetry_CameraAttitudeQuaternionResponse>, Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionSession {}

internal protocol Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerSession: ServerSessionServerStreaming {
  /// Send a message. Nonblocking.
  func send(_ response: Dronecore_Rpc_Telemetry_CameraAttitudeEulerResponse, completion: ((Bool) -> Void)?) throws
}

fileprivate final class Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerSessionBase: ServerSessionServerStreamingBase<Dronecore_Rpc_Telemetry_SubscribeCameraAttitudeEulerRequest, Dronecore_Rpc_Telemetry_CameraAttitudeEulerResponse>, Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerSession {}

class Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerSessionTestStub: ServerSessionServerStreamingTestStub<Dronecore_Rpc_Telemetry_CameraAttitudeEulerResponse>, Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerSession {}

internal protocol Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNEDSession: ServerSessionServerStreaming {
  /// Send a message. Nonblocking.
  func send(_ response: Dronecore_Rpc_Telemetry_GroundSpeedNEDResponse, completion: ((Bool) -> Void)?) throws
}

fileprivate final class Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNEDSessionBase: ServerSessionServerStreamingBase<Dronecore_Rpc_Telemetry_SubscribeGroundSpeedNEDRequest, Dronecore_Rpc_Telemetry_GroundSpeedNEDResponse>, Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNEDSession {}

class Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNEDSessionTestStub: ServerSessionServerStreamingTestStub<Dronecore_Rpc_Telemetry_GroundSpeedNEDResponse>, Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNEDSession {}

internal protocol Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeGPSInfoSession: ServerSessionServerStreaming {
  /// Send a message. Nonblocking.
  func send(_ response: Dronecore_Rpc_Telemetry_GPSInfoResponse, completion: ((Bool) -> Void)?) throws
}

fileprivate final class Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeGPSInfoSessionBase: ServerSessionServerStreamingBase<Dronecore_Rpc_Telemetry_SubscribeGPSInfoRequest, Dronecore_Rpc_Telemetry_GPSInfoResponse>, Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeGPSInfoSession {}

class Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeGPSInfoSessionTestStub: ServerSessionServerStreamingTestStub<Dronecore_Rpc_Telemetry_GPSInfoResponse>, Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeGPSInfoSession {}

internal protocol Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeBatterySession: ServerSessionServerStreaming {
  /// Send a message. Nonblocking.
  func send(_ response: Dronecore_Rpc_Telemetry_BatteryResponse, completion: ((Bool) -> Void)?) throws
}

fileprivate final class Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeBatterySessionBase: ServerSessionServerStreamingBase<Dronecore_Rpc_Telemetry_SubscribeBatteryRequest, Dronecore_Rpc_Telemetry_BatteryResponse>, Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeBatterySession {}

class Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeBatterySessionTestStub: ServerSessionServerStreamingTestStub<Dronecore_Rpc_Telemetry_BatteryResponse>, Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeBatterySession {}

internal protocol Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeSession: ServerSessionServerStreaming {
  /// Send a message. Nonblocking.
  func send(_ response: Dronecore_Rpc_Telemetry_FlightModeResponse, completion: ((Bool) -> Void)?) throws
}

fileprivate final class Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeSessionBase: ServerSessionServerStreamingBase<Dronecore_Rpc_Telemetry_SubscribeFlightModeRequest, Dronecore_Rpc_Telemetry_FlightModeResponse>, Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeSession {}

class Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeSessionTestStub: ServerSessionServerStreamingTestStub<Dronecore_Rpc_Telemetry_FlightModeResponse>, Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeSession {}

internal protocol Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeHealthSession: ServerSessionServerStreaming {
  /// Send a message. Nonblocking.
  func send(_ response: Dronecore_Rpc_Telemetry_HealthResponse, completion: ((Bool) -> Void)?) throws
}

fileprivate final class Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeHealthSessionBase: ServerSessionServerStreamingBase<Dronecore_Rpc_Telemetry_SubscribeHealthRequest, Dronecore_Rpc_Telemetry_HealthResponse>, Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeHealthSession {}

class Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeHealthSessionTestStub: ServerSessionServerStreamingTestStub<Dronecore_Rpc_Telemetry_HealthResponse>, Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeHealthSession {}

internal protocol Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeRCStatusSession: ServerSessionServerStreaming {
  /// Send a message. Nonblocking.
  func send(_ response: Dronecore_Rpc_Telemetry_RCStatusResponse, completion: ((Bool) -> Void)?) throws
}

fileprivate final class Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeRCStatusSessionBase: ServerSessionServerStreamingBase<Dronecore_Rpc_Telemetry_SubscribeRCStatusRequest, Dronecore_Rpc_Telemetry_RCStatusResponse>, Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeRCStatusSession {}

class Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeRCStatusSessionTestStub: ServerSessionServerStreamingTestStub<Dronecore_Rpc_Telemetry_RCStatusResponse>, Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeRCStatusSession {}


/// Main server for generated service
internal final class Dronecore_Rpc_Telemetry_TelemetryServiceServer: ServiceServer {
  private let provider: Dronecore_Rpc_Telemetry_TelemetryServiceProvider

  internal init(address: String, provider: Dronecore_Rpc_Telemetry_TelemetryServiceProvider) {
    self.provider = provider
    super.init(address: address)
  }

  internal init?(address: String, certificateURL: URL, keyURL: URL, provider: Dronecore_Rpc_Telemetry_TelemetryServiceProvider) {
    self.provider = provider
    super.init(address: address, certificateURL: certificateURL, keyURL: keyURL)
  }

  /// Start the server.
  internal override func handleMethod(_ method: String, handler: Handler, queue: DispatchQueue) throws -> Bool {
    let provider = self.provider
    switch method {
    case "/dronecore.rpc.telemetry.TelemetryService/SubscribePosition":
      try Dronecore_Rpc_Telemetry_TelemetryServiceSubscribePositionSessionBase(
        handler: handler,
        providerBlock: { try provider.subscribeposition(request: $0, session: $1 as! Dronecore_Rpc_Telemetry_TelemetryServiceSubscribePositionSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecore.rpc.telemetry.TelemetryService/SubscribeHome":
      try Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeHomeSessionBase(
        handler: handler,
        providerBlock: { try provider.subscribehome(request: $0, session: $1 as! Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeHomeSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecore.rpc.telemetry.TelemetryService/SubscribeInAir":
      try Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeInAirSessionBase(
        handler: handler,
        providerBlock: { try provider.subscribeinair(request: $0, session: $1 as! Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeInAirSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecore.rpc.telemetry.TelemetryService/SubscribeArmed":
      try Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeArmedSessionBase(
        handler: handler,
        providerBlock: { try provider.subscribearmed(request: $0, session: $1 as! Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeArmedSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecore.rpc.telemetry.TelemetryService/SubscribeAttitudeQuaternion":
      try Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionSessionBase(
        handler: handler,
        providerBlock: { try provider.subscribeattitudequaternion(request: $0, session: $1 as! Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecore.rpc.telemetry.TelemetryService/SubscribeAttitudeEuler":
      try Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerSessionBase(
        handler: handler,
        providerBlock: { try provider.subscribeattitudeeuler(request: $0, session: $1 as! Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecore.rpc.telemetry.TelemetryService/SubscribeCameraAttitudeQuaternion":
      try Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionSessionBase(
        handler: handler,
        providerBlock: { try provider.subscribecameraattitudequaternion(request: $0, session: $1 as! Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecore.rpc.telemetry.TelemetryService/SubscribeCameraAttitudeEuler":
      try Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerSessionBase(
        handler: handler,
        providerBlock: { try provider.subscribecameraattitudeeuler(request: $0, session: $1 as! Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecore.rpc.telemetry.TelemetryService/SubscribeGroundSpeedNED":
      try Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNEDSessionBase(
        handler: handler,
        providerBlock: { try provider.subscribegroundspeedned(request: $0, session: $1 as! Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNEDSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecore.rpc.telemetry.TelemetryService/SubscribeGPSInfo":
      try Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeGPSInfoSessionBase(
        handler: handler,
        providerBlock: { try provider.subscribegpsinfo(request: $0, session: $1 as! Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeGPSInfoSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecore.rpc.telemetry.TelemetryService/SubscribeBattery":
      try Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeBatterySessionBase(
        handler: handler,
        providerBlock: { try provider.subscribebattery(request: $0, session: $1 as! Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeBatterySessionBase) })
          .run(queue: queue)
      return true
    case "/dronecore.rpc.telemetry.TelemetryService/SubscribeFlightMode":
      try Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeSessionBase(
        handler: handler,
        providerBlock: { try provider.subscribeflightmode(request: $0, session: $1 as! Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecore.rpc.telemetry.TelemetryService/SubscribeHealth":
      try Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeHealthSessionBase(
        handler: handler,
        providerBlock: { try provider.subscribehealth(request: $0, session: $1 as! Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeHealthSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecore.rpc.telemetry.TelemetryService/SubscribeRCStatus":
      try Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeRCStatusSessionBase(
        handler: handler,
        providerBlock: { try provider.subscribercstatus(request: $0, session: $1 as! Dronecore_Rpc_Telemetry_TelemetryServiceSubscribeRCStatusSessionBase) })
          .run(queue: queue)
      return true
    default:
      return false
    }
  }
}

