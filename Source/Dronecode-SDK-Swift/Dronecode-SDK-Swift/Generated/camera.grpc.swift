//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: camera.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import gRPC
import SwiftProtobuf

internal protocol Dronecore_Rpc_Camera_CameraServiceTakePhotoCall: ClientCallUnary {}

fileprivate final class Dronecore_Rpc_Camera_CameraServiceTakePhotoCallBase: ClientCallUnaryBase<Dronecore_Rpc_Camera_TakePhotoRequest, Dronecore_Rpc_Camera_TakePhotoResponse>, Dronecore_Rpc_Camera_CameraServiceTakePhotoCall {
  override class var method: String { return "/dronecore.rpc.camera.CameraService/TakePhoto" }
}

internal protocol Dronecore_Rpc_Camera_CameraServiceStartPhotoIntervalCall: ClientCallUnary {}

fileprivate final class Dronecore_Rpc_Camera_CameraServiceStartPhotoIntervalCallBase: ClientCallUnaryBase<Dronecore_Rpc_Camera_StartPhotoIntervalRequest, Dronecore_Rpc_Camera_StartPhotoIntervalResponse>, Dronecore_Rpc_Camera_CameraServiceStartPhotoIntervalCall {
  override class var method: String { return "/dronecore.rpc.camera.CameraService/StartPhotoInterval" }
}

internal protocol Dronecore_Rpc_Camera_CameraServiceStopPhotoIntervalCall: ClientCallUnary {}

fileprivate final class Dronecore_Rpc_Camera_CameraServiceStopPhotoIntervalCallBase: ClientCallUnaryBase<Dronecore_Rpc_Camera_StopPhotoIntervalRequest, Dronecore_Rpc_Camera_StopPhotoIntervalResponse>, Dronecore_Rpc_Camera_CameraServiceStopPhotoIntervalCall {
  override class var method: String { return "/dronecore.rpc.camera.CameraService/StopPhotoInterval" }
}

internal protocol Dronecore_Rpc_Camera_CameraServiceStartVideoCall: ClientCallUnary {}

fileprivate final class Dronecore_Rpc_Camera_CameraServiceStartVideoCallBase: ClientCallUnaryBase<Dronecore_Rpc_Camera_StartVideoRequest, Dronecore_Rpc_Camera_StartVideoResponse>, Dronecore_Rpc_Camera_CameraServiceStartVideoCall {
  override class var method: String { return "/dronecore.rpc.camera.CameraService/StartVideo" }
}

internal protocol Dronecore_Rpc_Camera_CameraServiceStopVideoCall: ClientCallUnary {}

fileprivate final class Dronecore_Rpc_Camera_CameraServiceStopVideoCallBase: ClientCallUnaryBase<Dronecore_Rpc_Camera_StopVideoRequest, Dronecore_Rpc_Camera_StopVideoResponse>, Dronecore_Rpc_Camera_CameraServiceStopVideoCall {
  override class var method: String { return "/dronecore.rpc.camera.CameraService/StopVideo" }
}

internal protocol Dronecore_Rpc_Camera_CameraServiceStartVideoStreamingCall: ClientCallUnary {}

fileprivate final class Dronecore_Rpc_Camera_CameraServiceStartVideoStreamingCallBase: ClientCallUnaryBase<Dronecore_Rpc_Camera_StartVideoStreamingRequest, Dronecore_Rpc_Camera_StartVideoStreamingResponse>, Dronecore_Rpc_Camera_CameraServiceStartVideoStreamingCall {
  override class var method: String { return "/dronecore.rpc.camera.CameraService/StartVideoStreaming" }
}

internal protocol Dronecore_Rpc_Camera_CameraServiceStopVideoStreamingCall: ClientCallUnary {}

fileprivate final class Dronecore_Rpc_Camera_CameraServiceStopVideoStreamingCallBase: ClientCallUnaryBase<Dronecore_Rpc_Camera_StopVideoStreamingRequest, Dronecore_Rpc_Camera_StopVideoStreamingResponse>, Dronecore_Rpc_Camera_CameraServiceStopVideoStreamingCall {
  override class var method: String { return "/dronecore.rpc.camera.CameraService/StopVideoStreaming" }
}

internal protocol Dronecore_Rpc_Camera_CameraServiceSetModeCall: ClientCallUnary {}

fileprivate final class Dronecore_Rpc_Camera_CameraServiceSetModeCallBase: ClientCallUnaryBase<Dronecore_Rpc_Camera_SetModeRequest, Dronecore_Rpc_Camera_SetModeResponse>, Dronecore_Rpc_Camera_CameraServiceSetModeCall {
  override class var method: String { return "/dronecore.rpc.camera.CameraService/SetMode" }
}

internal protocol Dronecore_Rpc_Camera_CameraServiceSubscribeModeCall: ClientCallServerStreaming {
  /// Call this to wait for a result. Blocking.
  func receive() throws -> Dronecore_Rpc_Camera_ModeResponse
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (Dronecore_Rpc_Camera_ModeResponse?, ClientError?) -> Void) throws
}

fileprivate final class Dronecore_Rpc_Camera_CameraServiceSubscribeModeCallBase: ClientCallServerStreamingBase<Dronecore_Rpc_Camera_SubscribeModeRequest, Dronecore_Rpc_Camera_ModeResponse>, Dronecore_Rpc_Camera_CameraServiceSubscribeModeCall {
  override class var method: String { return "/dronecore.rpc.camera.CameraService/SubscribeMode" }
}

class Dronecore_Rpc_Camera_CameraServiceSubscribeModeCallTestStub: ClientCallServerStreamingTestStub<Dronecore_Rpc_Camera_ModeResponse>, Dronecore_Rpc_Camera_CameraServiceSubscribeModeCall {
  override class var method: String { return "/dronecore.rpc.camera.CameraService/SubscribeMode" }
}

internal protocol Dronecore_Rpc_Camera_CameraServiceSetVideoStreamSettingsCall: ClientCallUnary {}

fileprivate final class Dronecore_Rpc_Camera_CameraServiceSetVideoStreamSettingsCallBase: ClientCallUnaryBase<Dronecore_Rpc_Camera_SetVideoStreamSettingsRequest, Dronecore_Rpc_Camera_SetVideoStreamSettingsResponse>, Dronecore_Rpc_Camera_CameraServiceSetVideoStreamSettingsCall {
  override class var method: String { return "/dronecore.rpc.camera.CameraService/SetVideoStreamSettings" }
}

internal protocol Dronecore_Rpc_Camera_CameraServiceSubscribeVideoStreamInfoCall: ClientCallServerStreaming {
  /// Call this to wait for a result. Blocking.
  func receive() throws -> Dronecore_Rpc_Camera_VideoStreamInfoResponse
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (Dronecore_Rpc_Camera_VideoStreamInfoResponse?, ClientError?) -> Void) throws
}

fileprivate final class Dronecore_Rpc_Camera_CameraServiceSubscribeVideoStreamInfoCallBase: ClientCallServerStreamingBase<Dronecore_Rpc_Camera_SubscribeVideoStreamInfoRequest, Dronecore_Rpc_Camera_VideoStreamInfoResponse>, Dronecore_Rpc_Camera_CameraServiceSubscribeVideoStreamInfoCall {
  override class var method: String { return "/dronecore.rpc.camera.CameraService/SubscribeVideoStreamInfo" }
}

class Dronecore_Rpc_Camera_CameraServiceSubscribeVideoStreamInfoCallTestStub: ClientCallServerStreamingTestStub<Dronecore_Rpc_Camera_VideoStreamInfoResponse>, Dronecore_Rpc_Camera_CameraServiceSubscribeVideoStreamInfoCall {
  override class var method: String { return "/dronecore.rpc.camera.CameraService/SubscribeVideoStreamInfo" }
}

internal protocol Dronecore_Rpc_Camera_CameraServiceSubscribeCaptureInfoCall: ClientCallServerStreaming {
  /// Call this to wait for a result. Blocking.
  func receive() throws -> Dronecore_Rpc_Camera_CaptureInfoResponse
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (Dronecore_Rpc_Camera_CaptureInfoResponse?, ClientError?) -> Void) throws
}

fileprivate final class Dronecore_Rpc_Camera_CameraServiceSubscribeCaptureInfoCallBase: ClientCallServerStreamingBase<Dronecore_Rpc_Camera_SubscribeCaptureInfoRequest, Dronecore_Rpc_Camera_CaptureInfoResponse>, Dronecore_Rpc_Camera_CameraServiceSubscribeCaptureInfoCall {
  override class var method: String { return "/dronecore.rpc.camera.CameraService/SubscribeCaptureInfo" }
}

class Dronecore_Rpc_Camera_CameraServiceSubscribeCaptureInfoCallTestStub: ClientCallServerStreamingTestStub<Dronecore_Rpc_Camera_CaptureInfoResponse>, Dronecore_Rpc_Camera_CameraServiceSubscribeCaptureInfoCall {
  override class var method: String { return "/dronecore.rpc.camera.CameraService/SubscribeCaptureInfo" }
}

internal protocol Dronecore_Rpc_Camera_CameraServiceGetPossibleSettingsCall: ClientCallUnary {}

fileprivate final class Dronecore_Rpc_Camera_CameraServiceGetPossibleSettingsCallBase: ClientCallUnaryBase<Dronecore_Rpc_Camera_GetPossibleSettingsRequest, Dronecore_Rpc_Camera_GetPossibleSettingsResponse>, Dronecore_Rpc_Camera_CameraServiceGetPossibleSettingsCall {
  override class var method: String { return "/dronecore.rpc.camera.CameraService/GetPossibleSettings" }
}

internal protocol Dronecore_Rpc_Camera_CameraServiceSetOptionCall: ClientCallUnary {}

fileprivate final class Dronecore_Rpc_Camera_CameraServiceSetOptionCallBase: ClientCallUnaryBase<Dronecore_Rpc_Camera_SetOptionRequest, Dronecore_Rpc_Camera_SetOptionResponse>, Dronecore_Rpc_Camera_CameraServiceSetOptionCall {
  override class var method: String { return "/dronecore.rpc.camera.CameraService/SetOption" }
}


/// Instantiate Dronecore_Rpc_Camera_CameraServiceServiceClient, then call methods of this protocol to make API calls.
internal protocol Dronecore_Rpc_Camera_CameraServiceService: ServiceClient {
  /// Synchronous. Unary.
  func takephoto(_ request: Dronecore_Rpc_Camera_TakePhotoRequest) throws -> Dronecore_Rpc_Camera_TakePhotoResponse
  /// Asynchronous. Unary.
  func takephoto(_ request: Dronecore_Rpc_Camera_TakePhotoRequest, completion: @escaping (Dronecore_Rpc_Camera_TakePhotoResponse?, CallResult) -> Void) throws -> Dronecore_Rpc_Camera_CameraServiceTakePhotoCall

  /// Synchronous. Unary.
  func startphotointerval(_ request: Dronecore_Rpc_Camera_StartPhotoIntervalRequest) throws -> Dronecore_Rpc_Camera_StartPhotoIntervalResponse
  /// Asynchronous. Unary.
  func startphotointerval(_ request: Dronecore_Rpc_Camera_StartPhotoIntervalRequest, completion: @escaping (Dronecore_Rpc_Camera_StartPhotoIntervalResponse?, CallResult) -> Void) throws -> Dronecore_Rpc_Camera_CameraServiceStartPhotoIntervalCall

  /// Synchronous. Unary.
  func stopphotointerval(_ request: Dronecore_Rpc_Camera_StopPhotoIntervalRequest) throws -> Dronecore_Rpc_Camera_StopPhotoIntervalResponse
  /// Asynchronous. Unary.
  func stopphotointerval(_ request: Dronecore_Rpc_Camera_StopPhotoIntervalRequest, completion: @escaping (Dronecore_Rpc_Camera_StopPhotoIntervalResponse?, CallResult) -> Void) throws -> Dronecore_Rpc_Camera_CameraServiceStopPhotoIntervalCall

  /// Synchronous. Unary.
  func startvideo(_ request: Dronecore_Rpc_Camera_StartVideoRequest) throws -> Dronecore_Rpc_Camera_StartVideoResponse
  /// Asynchronous. Unary.
  func startvideo(_ request: Dronecore_Rpc_Camera_StartVideoRequest, completion: @escaping (Dronecore_Rpc_Camera_StartVideoResponse?, CallResult) -> Void) throws -> Dronecore_Rpc_Camera_CameraServiceStartVideoCall

  /// Synchronous. Unary.
  func stopvideo(_ request: Dronecore_Rpc_Camera_StopVideoRequest) throws -> Dronecore_Rpc_Camera_StopVideoResponse
  /// Asynchronous. Unary.
  func stopvideo(_ request: Dronecore_Rpc_Camera_StopVideoRequest, completion: @escaping (Dronecore_Rpc_Camera_StopVideoResponse?, CallResult) -> Void) throws -> Dronecore_Rpc_Camera_CameraServiceStopVideoCall

  /// Synchronous. Unary.
  func startvideostreaming(_ request: Dronecore_Rpc_Camera_StartVideoStreamingRequest) throws -> Dronecore_Rpc_Camera_StartVideoStreamingResponse
  /// Asynchronous. Unary.
  func startvideostreaming(_ request: Dronecore_Rpc_Camera_StartVideoStreamingRequest, completion: @escaping (Dronecore_Rpc_Camera_StartVideoStreamingResponse?, CallResult) -> Void) throws -> Dronecore_Rpc_Camera_CameraServiceStartVideoStreamingCall

  /// Synchronous. Unary.
  func stopvideostreaming(_ request: Dronecore_Rpc_Camera_StopVideoStreamingRequest) throws -> Dronecore_Rpc_Camera_StopVideoStreamingResponse
  /// Asynchronous. Unary.
  func stopvideostreaming(_ request: Dronecore_Rpc_Camera_StopVideoStreamingRequest, completion: @escaping (Dronecore_Rpc_Camera_StopVideoStreamingResponse?, CallResult) -> Void) throws -> Dronecore_Rpc_Camera_CameraServiceStopVideoStreamingCall

  /// Synchronous. Unary.
  func setmode(_ request: Dronecore_Rpc_Camera_SetModeRequest) throws -> Dronecore_Rpc_Camera_SetModeResponse
  /// Asynchronous. Unary.
  func setmode(_ request: Dronecore_Rpc_Camera_SetModeRequest, completion: @escaping (Dronecore_Rpc_Camera_SetModeResponse?, CallResult) -> Void) throws -> Dronecore_Rpc_Camera_CameraServiceSetModeCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribemode(_ request: Dronecore_Rpc_Camera_SubscribeModeRequest, completion: ((CallResult) -> Void)?) throws -> Dronecore_Rpc_Camera_CameraServiceSubscribeModeCall

  /// Synchronous. Unary.
  func setvideostreamsettings(_ request: Dronecore_Rpc_Camera_SetVideoStreamSettingsRequest) throws -> Dronecore_Rpc_Camera_SetVideoStreamSettingsResponse
  /// Asynchronous. Unary.
  func setvideostreamsettings(_ request: Dronecore_Rpc_Camera_SetVideoStreamSettingsRequest, completion: @escaping (Dronecore_Rpc_Camera_SetVideoStreamSettingsResponse?, CallResult) -> Void) throws -> Dronecore_Rpc_Camera_CameraServiceSetVideoStreamSettingsCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribevideostreaminfo(_ request: Dronecore_Rpc_Camera_SubscribeVideoStreamInfoRequest, completion: ((CallResult) -> Void)?) throws -> Dronecore_Rpc_Camera_CameraServiceSubscribeVideoStreamInfoCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribecaptureinfo(_ request: Dronecore_Rpc_Camera_SubscribeCaptureInfoRequest, completion: ((CallResult) -> Void)?) throws -> Dronecore_Rpc_Camera_CameraServiceSubscribeCaptureInfoCall

  /// Synchronous. Unary.
  func getpossiblesettings(_ request: Dronecore_Rpc_Camera_GetPossibleSettingsRequest) throws -> Dronecore_Rpc_Camera_GetPossibleSettingsResponse
  /// Asynchronous. Unary.
  func getpossiblesettings(_ request: Dronecore_Rpc_Camera_GetPossibleSettingsRequest, completion: @escaping (Dronecore_Rpc_Camera_GetPossibleSettingsResponse?, CallResult) -> Void) throws -> Dronecore_Rpc_Camera_CameraServiceGetPossibleSettingsCall

  /// Synchronous. Unary.
  func setoption(_ request: Dronecore_Rpc_Camera_SetOptionRequest) throws -> Dronecore_Rpc_Camera_SetOptionResponse
  /// Asynchronous. Unary.
  func setoption(_ request: Dronecore_Rpc_Camera_SetOptionRequest, completion: @escaping (Dronecore_Rpc_Camera_SetOptionResponse?, CallResult) -> Void) throws -> Dronecore_Rpc_Camera_CameraServiceSetOptionCall

}

internal final class Dronecore_Rpc_Camera_CameraServiceServiceClient: ServiceClientBase, Dronecore_Rpc_Camera_CameraServiceService {
  /// Synchronous. Unary.
  internal func takephoto(_ request: Dronecore_Rpc_Camera_TakePhotoRequest) throws -> Dronecore_Rpc_Camera_TakePhotoResponse {
    return try Dronecore_Rpc_Camera_CameraServiceTakePhotoCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func takephoto(_ request: Dronecore_Rpc_Camera_TakePhotoRequest, completion: @escaping (Dronecore_Rpc_Camera_TakePhotoResponse?, CallResult) -> Void) throws -> Dronecore_Rpc_Camera_CameraServiceTakePhotoCall {
    return try Dronecore_Rpc_Camera_CameraServiceTakePhotoCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func startphotointerval(_ request: Dronecore_Rpc_Camera_StartPhotoIntervalRequest) throws -> Dronecore_Rpc_Camera_StartPhotoIntervalResponse {
    return try Dronecore_Rpc_Camera_CameraServiceStartPhotoIntervalCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func startphotointerval(_ request: Dronecore_Rpc_Camera_StartPhotoIntervalRequest, completion: @escaping (Dronecore_Rpc_Camera_StartPhotoIntervalResponse?, CallResult) -> Void) throws -> Dronecore_Rpc_Camera_CameraServiceStartPhotoIntervalCall {
    return try Dronecore_Rpc_Camera_CameraServiceStartPhotoIntervalCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func stopphotointerval(_ request: Dronecore_Rpc_Camera_StopPhotoIntervalRequest) throws -> Dronecore_Rpc_Camera_StopPhotoIntervalResponse {
    return try Dronecore_Rpc_Camera_CameraServiceStopPhotoIntervalCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func stopphotointerval(_ request: Dronecore_Rpc_Camera_StopPhotoIntervalRequest, completion: @escaping (Dronecore_Rpc_Camera_StopPhotoIntervalResponse?, CallResult) -> Void) throws -> Dronecore_Rpc_Camera_CameraServiceStopPhotoIntervalCall {
    return try Dronecore_Rpc_Camera_CameraServiceStopPhotoIntervalCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func startvideo(_ request: Dronecore_Rpc_Camera_StartVideoRequest) throws -> Dronecore_Rpc_Camera_StartVideoResponse {
    return try Dronecore_Rpc_Camera_CameraServiceStartVideoCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func startvideo(_ request: Dronecore_Rpc_Camera_StartVideoRequest, completion: @escaping (Dronecore_Rpc_Camera_StartVideoResponse?, CallResult) -> Void) throws -> Dronecore_Rpc_Camera_CameraServiceStartVideoCall {
    return try Dronecore_Rpc_Camera_CameraServiceStartVideoCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func stopvideo(_ request: Dronecore_Rpc_Camera_StopVideoRequest) throws -> Dronecore_Rpc_Camera_StopVideoResponse {
    return try Dronecore_Rpc_Camera_CameraServiceStopVideoCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func stopvideo(_ request: Dronecore_Rpc_Camera_StopVideoRequest, completion: @escaping (Dronecore_Rpc_Camera_StopVideoResponse?, CallResult) -> Void) throws -> Dronecore_Rpc_Camera_CameraServiceStopVideoCall {
    return try Dronecore_Rpc_Camera_CameraServiceStopVideoCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func startvideostreaming(_ request: Dronecore_Rpc_Camera_StartVideoStreamingRequest) throws -> Dronecore_Rpc_Camera_StartVideoStreamingResponse {
    return try Dronecore_Rpc_Camera_CameraServiceStartVideoStreamingCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func startvideostreaming(_ request: Dronecore_Rpc_Camera_StartVideoStreamingRequest, completion: @escaping (Dronecore_Rpc_Camera_StartVideoStreamingResponse?, CallResult) -> Void) throws -> Dronecore_Rpc_Camera_CameraServiceStartVideoStreamingCall {
    return try Dronecore_Rpc_Camera_CameraServiceStartVideoStreamingCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func stopvideostreaming(_ request: Dronecore_Rpc_Camera_StopVideoStreamingRequest) throws -> Dronecore_Rpc_Camera_StopVideoStreamingResponse {
    return try Dronecore_Rpc_Camera_CameraServiceStopVideoStreamingCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func stopvideostreaming(_ request: Dronecore_Rpc_Camera_StopVideoStreamingRequest, completion: @escaping (Dronecore_Rpc_Camera_StopVideoStreamingResponse?, CallResult) -> Void) throws -> Dronecore_Rpc_Camera_CameraServiceStopVideoStreamingCall {
    return try Dronecore_Rpc_Camera_CameraServiceStopVideoStreamingCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func setmode(_ request: Dronecore_Rpc_Camera_SetModeRequest) throws -> Dronecore_Rpc_Camera_SetModeResponse {
    return try Dronecore_Rpc_Camera_CameraServiceSetModeCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func setmode(_ request: Dronecore_Rpc_Camera_SetModeRequest, completion: @escaping (Dronecore_Rpc_Camera_SetModeResponse?, CallResult) -> Void) throws -> Dronecore_Rpc_Camera_CameraServiceSetModeCall {
    return try Dronecore_Rpc_Camera_CameraServiceSetModeCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribemode(_ request: Dronecore_Rpc_Camera_SubscribeModeRequest, completion: ((CallResult) -> Void)?) throws -> Dronecore_Rpc_Camera_CameraServiceSubscribeModeCall {
    return try Dronecore_Rpc_Camera_CameraServiceSubscribeModeCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func setvideostreamsettings(_ request: Dronecore_Rpc_Camera_SetVideoStreamSettingsRequest) throws -> Dronecore_Rpc_Camera_SetVideoStreamSettingsResponse {
    return try Dronecore_Rpc_Camera_CameraServiceSetVideoStreamSettingsCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func setvideostreamsettings(_ request: Dronecore_Rpc_Camera_SetVideoStreamSettingsRequest, completion: @escaping (Dronecore_Rpc_Camera_SetVideoStreamSettingsResponse?, CallResult) -> Void) throws -> Dronecore_Rpc_Camera_CameraServiceSetVideoStreamSettingsCall {
    return try Dronecore_Rpc_Camera_CameraServiceSetVideoStreamSettingsCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribevideostreaminfo(_ request: Dronecore_Rpc_Camera_SubscribeVideoStreamInfoRequest, completion: ((CallResult) -> Void)?) throws -> Dronecore_Rpc_Camera_CameraServiceSubscribeVideoStreamInfoCall {
    return try Dronecore_Rpc_Camera_CameraServiceSubscribeVideoStreamInfoCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribecaptureinfo(_ request: Dronecore_Rpc_Camera_SubscribeCaptureInfoRequest, completion: ((CallResult) -> Void)?) throws -> Dronecore_Rpc_Camera_CameraServiceSubscribeCaptureInfoCall {
    return try Dronecore_Rpc_Camera_CameraServiceSubscribeCaptureInfoCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func getpossiblesettings(_ request: Dronecore_Rpc_Camera_GetPossibleSettingsRequest) throws -> Dronecore_Rpc_Camera_GetPossibleSettingsResponse {
    return try Dronecore_Rpc_Camera_CameraServiceGetPossibleSettingsCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func getpossiblesettings(_ request: Dronecore_Rpc_Camera_GetPossibleSettingsRequest, completion: @escaping (Dronecore_Rpc_Camera_GetPossibleSettingsResponse?, CallResult) -> Void) throws -> Dronecore_Rpc_Camera_CameraServiceGetPossibleSettingsCall {
    return try Dronecore_Rpc_Camera_CameraServiceGetPossibleSettingsCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func setoption(_ request: Dronecore_Rpc_Camera_SetOptionRequest) throws -> Dronecore_Rpc_Camera_SetOptionResponse {
    return try Dronecore_Rpc_Camera_CameraServiceSetOptionCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func setoption(_ request: Dronecore_Rpc_Camera_SetOptionRequest, completion: @escaping (Dronecore_Rpc_Camera_SetOptionResponse?, CallResult) -> Void) throws -> Dronecore_Rpc_Camera_CameraServiceSetOptionCall {
    return try Dronecore_Rpc_Camera_CameraServiceSetOptionCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

}

class Dronecore_Rpc_Camera_CameraServiceServiceTestStub: ServiceClientTestStubBase, Dronecore_Rpc_Camera_CameraServiceService {
  var takephotoRequests: [Dronecore_Rpc_Camera_TakePhotoRequest] = []
  var takephotoResponses: [Dronecore_Rpc_Camera_TakePhotoResponse] = []
  func takephoto(_ request: Dronecore_Rpc_Camera_TakePhotoRequest) throws -> Dronecore_Rpc_Camera_TakePhotoResponse {
    takephotoRequests.append(request)
    defer { takephotoResponses.removeFirst() }
    return takephotoResponses.first!
  }
  func takephoto(_ request: Dronecore_Rpc_Camera_TakePhotoRequest, completion: @escaping (Dronecore_Rpc_Camera_TakePhotoResponse?, CallResult) -> Void) throws -> Dronecore_Rpc_Camera_CameraServiceTakePhotoCall {
    fatalError("not implemented")
  }

  var startphotointervalRequests: [Dronecore_Rpc_Camera_StartPhotoIntervalRequest] = []
  var startphotointervalResponses: [Dronecore_Rpc_Camera_StartPhotoIntervalResponse] = []
  func startphotointerval(_ request: Dronecore_Rpc_Camera_StartPhotoIntervalRequest) throws -> Dronecore_Rpc_Camera_StartPhotoIntervalResponse {
    startphotointervalRequests.append(request)
    defer { startphotointervalResponses.removeFirst() }
    return startphotointervalResponses.first!
  }
  func startphotointerval(_ request: Dronecore_Rpc_Camera_StartPhotoIntervalRequest, completion: @escaping (Dronecore_Rpc_Camera_StartPhotoIntervalResponse?, CallResult) -> Void) throws -> Dronecore_Rpc_Camera_CameraServiceStartPhotoIntervalCall {
    fatalError("not implemented")
  }

  var stopphotointervalRequests: [Dronecore_Rpc_Camera_StopPhotoIntervalRequest] = []
  var stopphotointervalResponses: [Dronecore_Rpc_Camera_StopPhotoIntervalResponse] = []
  func stopphotointerval(_ request: Dronecore_Rpc_Camera_StopPhotoIntervalRequest) throws -> Dronecore_Rpc_Camera_StopPhotoIntervalResponse {
    stopphotointervalRequests.append(request)
    defer { stopphotointervalResponses.removeFirst() }
    return stopphotointervalResponses.first!
  }
  func stopphotointerval(_ request: Dronecore_Rpc_Camera_StopPhotoIntervalRequest, completion: @escaping (Dronecore_Rpc_Camera_StopPhotoIntervalResponse?, CallResult) -> Void) throws -> Dronecore_Rpc_Camera_CameraServiceStopPhotoIntervalCall {
    fatalError("not implemented")
  }

  var startvideoRequests: [Dronecore_Rpc_Camera_StartVideoRequest] = []
  var startvideoResponses: [Dronecore_Rpc_Camera_StartVideoResponse] = []
  func startvideo(_ request: Dronecore_Rpc_Camera_StartVideoRequest) throws -> Dronecore_Rpc_Camera_StartVideoResponse {
    startvideoRequests.append(request)
    defer { startvideoResponses.removeFirst() }
    return startvideoResponses.first!
  }
  func startvideo(_ request: Dronecore_Rpc_Camera_StartVideoRequest, completion: @escaping (Dronecore_Rpc_Camera_StartVideoResponse?, CallResult) -> Void) throws -> Dronecore_Rpc_Camera_CameraServiceStartVideoCall {
    fatalError("not implemented")
  }

  var stopvideoRequests: [Dronecore_Rpc_Camera_StopVideoRequest] = []
  var stopvideoResponses: [Dronecore_Rpc_Camera_StopVideoResponse] = []
  func stopvideo(_ request: Dronecore_Rpc_Camera_StopVideoRequest) throws -> Dronecore_Rpc_Camera_StopVideoResponse {
    stopvideoRequests.append(request)
    defer { stopvideoResponses.removeFirst() }
    return stopvideoResponses.first!
  }
  func stopvideo(_ request: Dronecore_Rpc_Camera_StopVideoRequest, completion: @escaping (Dronecore_Rpc_Camera_StopVideoResponse?, CallResult) -> Void) throws -> Dronecore_Rpc_Camera_CameraServiceStopVideoCall {
    fatalError("not implemented")
  }

  var startvideostreamingRequests: [Dronecore_Rpc_Camera_StartVideoStreamingRequest] = []
  var startvideostreamingResponses: [Dronecore_Rpc_Camera_StartVideoStreamingResponse] = []
  func startvideostreaming(_ request: Dronecore_Rpc_Camera_StartVideoStreamingRequest) throws -> Dronecore_Rpc_Camera_StartVideoStreamingResponse {
    startvideostreamingRequests.append(request)
    defer { startvideostreamingResponses.removeFirst() }
    return startvideostreamingResponses.first!
  }
  func startvideostreaming(_ request: Dronecore_Rpc_Camera_StartVideoStreamingRequest, completion: @escaping (Dronecore_Rpc_Camera_StartVideoStreamingResponse?, CallResult) -> Void) throws -> Dronecore_Rpc_Camera_CameraServiceStartVideoStreamingCall {
    fatalError("not implemented")
  }

  var stopvideostreamingRequests: [Dronecore_Rpc_Camera_StopVideoStreamingRequest] = []
  var stopvideostreamingResponses: [Dronecore_Rpc_Camera_StopVideoStreamingResponse] = []
  func stopvideostreaming(_ request: Dronecore_Rpc_Camera_StopVideoStreamingRequest) throws -> Dronecore_Rpc_Camera_StopVideoStreamingResponse {
    stopvideostreamingRequests.append(request)
    defer { stopvideostreamingResponses.removeFirst() }
    return stopvideostreamingResponses.first!
  }
  func stopvideostreaming(_ request: Dronecore_Rpc_Camera_StopVideoStreamingRequest, completion: @escaping (Dronecore_Rpc_Camera_StopVideoStreamingResponse?, CallResult) -> Void) throws -> Dronecore_Rpc_Camera_CameraServiceStopVideoStreamingCall {
    fatalError("not implemented")
  }

  var setmodeRequests: [Dronecore_Rpc_Camera_SetModeRequest] = []
  var setmodeResponses: [Dronecore_Rpc_Camera_SetModeResponse] = []
  func setmode(_ request: Dronecore_Rpc_Camera_SetModeRequest) throws -> Dronecore_Rpc_Camera_SetModeResponse {
    setmodeRequests.append(request)
    defer { setmodeResponses.removeFirst() }
    return setmodeResponses.first!
  }
  func setmode(_ request: Dronecore_Rpc_Camera_SetModeRequest, completion: @escaping (Dronecore_Rpc_Camera_SetModeResponse?, CallResult) -> Void) throws -> Dronecore_Rpc_Camera_CameraServiceSetModeCall {
    fatalError("not implemented")
  }

  var subscribemodeRequests: [Dronecore_Rpc_Camera_SubscribeModeRequest] = []
  var subscribemodeCalls: [Dronecore_Rpc_Camera_CameraServiceSubscribeModeCall] = []
  func subscribemode(_ request: Dronecore_Rpc_Camera_SubscribeModeRequest, completion: ((CallResult) -> Void)?) throws -> Dronecore_Rpc_Camera_CameraServiceSubscribeModeCall {
    subscribemodeRequests.append(request)
    defer { subscribemodeCalls.removeFirst() }
    return subscribemodeCalls.first!
  }

  var setvideostreamsettingsRequests: [Dronecore_Rpc_Camera_SetVideoStreamSettingsRequest] = []
  var setvideostreamsettingsResponses: [Dronecore_Rpc_Camera_SetVideoStreamSettingsResponse] = []
  func setvideostreamsettings(_ request: Dronecore_Rpc_Camera_SetVideoStreamSettingsRequest) throws -> Dronecore_Rpc_Camera_SetVideoStreamSettingsResponse {
    setvideostreamsettingsRequests.append(request)
    defer { setvideostreamsettingsResponses.removeFirst() }
    return setvideostreamsettingsResponses.first!
  }
  func setvideostreamsettings(_ request: Dronecore_Rpc_Camera_SetVideoStreamSettingsRequest, completion: @escaping (Dronecore_Rpc_Camera_SetVideoStreamSettingsResponse?, CallResult) -> Void) throws -> Dronecore_Rpc_Camera_CameraServiceSetVideoStreamSettingsCall {
    fatalError("not implemented")
  }

  var subscribevideostreaminfoRequests: [Dronecore_Rpc_Camera_SubscribeVideoStreamInfoRequest] = []
  var subscribevideostreaminfoCalls: [Dronecore_Rpc_Camera_CameraServiceSubscribeVideoStreamInfoCall] = []
  func subscribevideostreaminfo(_ request: Dronecore_Rpc_Camera_SubscribeVideoStreamInfoRequest, completion: ((CallResult) -> Void)?) throws -> Dronecore_Rpc_Camera_CameraServiceSubscribeVideoStreamInfoCall {
    subscribevideostreaminfoRequests.append(request)
    defer { subscribevideostreaminfoCalls.removeFirst() }
    return subscribevideostreaminfoCalls.first!
  }

  var subscribecaptureinfoRequests: [Dronecore_Rpc_Camera_SubscribeCaptureInfoRequest] = []
  var subscribecaptureinfoCalls: [Dronecore_Rpc_Camera_CameraServiceSubscribeCaptureInfoCall] = []
  func subscribecaptureinfo(_ request: Dronecore_Rpc_Camera_SubscribeCaptureInfoRequest, completion: ((CallResult) -> Void)?) throws -> Dronecore_Rpc_Camera_CameraServiceSubscribeCaptureInfoCall {
    subscribecaptureinfoRequests.append(request)
    defer { subscribecaptureinfoCalls.removeFirst() }
    return subscribecaptureinfoCalls.first!
  }

  var getpossiblesettingsRequests: [Dronecore_Rpc_Camera_GetPossibleSettingsRequest] = []
  var getpossiblesettingsResponses: [Dronecore_Rpc_Camera_GetPossibleSettingsResponse] = []
  func getpossiblesettings(_ request: Dronecore_Rpc_Camera_GetPossibleSettingsRequest) throws -> Dronecore_Rpc_Camera_GetPossibleSettingsResponse {
    getpossiblesettingsRequests.append(request)
    defer { getpossiblesettingsResponses.removeFirst() }
    return getpossiblesettingsResponses.first!
  }
  func getpossiblesettings(_ request: Dronecore_Rpc_Camera_GetPossibleSettingsRequest, completion: @escaping (Dronecore_Rpc_Camera_GetPossibleSettingsResponse?, CallResult) -> Void) throws -> Dronecore_Rpc_Camera_CameraServiceGetPossibleSettingsCall {
    fatalError("not implemented")
  }

  var setoptionRequests: [Dronecore_Rpc_Camera_SetOptionRequest] = []
  var setoptionResponses: [Dronecore_Rpc_Camera_SetOptionResponse] = []
  func setoption(_ request: Dronecore_Rpc_Camera_SetOptionRequest) throws -> Dronecore_Rpc_Camera_SetOptionResponse {
    setoptionRequests.append(request)
    defer { setoptionResponses.removeFirst() }
    return setoptionResponses.first!
  }
  func setoption(_ request: Dronecore_Rpc_Camera_SetOptionRequest, completion: @escaping (Dronecore_Rpc_Camera_SetOptionResponse?, CallResult) -> Void) throws -> Dronecore_Rpc_Camera_CameraServiceSetOptionCall {
    fatalError("not implemented")
  }

}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Dronecore_Rpc_Camera_CameraServiceProvider {
  func takephoto(request: Dronecore_Rpc_Camera_TakePhotoRequest, session: Dronecore_Rpc_Camera_CameraServiceTakePhotoSession) throws -> Dronecore_Rpc_Camera_TakePhotoResponse
  func startphotointerval(request: Dronecore_Rpc_Camera_StartPhotoIntervalRequest, session: Dronecore_Rpc_Camera_CameraServiceStartPhotoIntervalSession) throws -> Dronecore_Rpc_Camera_StartPhotoIntervalResponse
  func stopphotointerval(request: Dronecore_Rpc_Camera_StopPhotoIntervalRequest, session: Dronecore_Rpc_Camera_CameraServiceStopPhotoIntervalSession) throws -> Dronecore_Rpc_Camera_StopPhotoIntervalResponse
  func startvideo(request: Dronecore_Rpc_Camera_StartVideoRequest, session: Dronecore_Rpc_Camera_CameraServiceStartVideoSession) throws -> Dronecore_Rpc_Camera_StartVideoResponse
  func stopvideo(request: Dronecore_Rpc_Camera_StopVideoRequest, session: Dronecore_Rpc_Camera_CameraServiceStopVideoSession) throws -> Dronecore_Rpc_Camera_StopVideoResponse
  func startvideostreaming(request: Dronecore_Rpc_Camera_StartVideoStreamingRequest, session: Dronecore_Rpc_Camera_CameraServiceStartVideoStreamingSession) throws -> Dronecore_Rpc_Camera_StartVideoStreamingResponse
  func stopvideostreaming(request: Dronecore_Rpc_Camera_StopVideoStreamingRequest, session: Dronecore_Rpc_Camera_CameraServiceStopVideoStreamingSession) throws -> Dronecore_Rpc_Camera_StopVideoStreamingResponse
  func setmode(request: Dronecore_Rpc_Camera_SetModeRequest, session: Dronecore_Rpc_Camera_CameraServiceSetModeSession) throws -> Dronecore_Rpc_Camera_SetModeResponse
  func subscribemode(request: Dronecore_Rpc_Camera_SubscribeModeRequest, session: Dronecore_Rpc_Camera_CameraServiceSubscribeModeSession) throws
  func setvideostreamsettings(request: Dronecore_Rpc_Camera_SetVideoStreamSettingsRequest, session: Dronecore_Rpc_Camera_CameraServiceSetVideoStreamSettingsSession) throws -> Dronecore_Rpc_Camera_SetVideoStreamSettingsResponse
  func subscribevideostreaminfo(request: Dronecore_Rpc_Camera_SubscribeVideoStreamInfoRequest, session: Dronecore_Rpc_Camera_CameraServiceSubscribeVideoStreamInfoSession) throws
  func subscribecaptureinfo(request: Dronecore_Rpc_Camera_SubscribeCaptureInfoRequest, session: Dronecore_Rpc_Camera_CameraServiceSubscribeCaptureInfoSession) throws
  func getpossiblesettings(request: Dronecore_Rpc_Camera_GetPossibleSettingsRequest, session: Dronecore_Rpc_Camera_CameraServiceGetPossibleSettingsSession) throws -> Dronecore_Rpc_Camera_GetPossibleSettingsResponse
  func setoption(request: Dronecore_Rpc_Camera_SetOptionRequest, session: Dronecore_Rpc_Camera_CameraServiceSetOptionSession) throws -> Dronecore_Rpc_Camera_SetOptionResponse
}

internal protocol Dronecore_Rpc_Camera_CameraServiceTakePhotoSession: ServerSessionUnary {}

fileprivate final class Dronecore_Rpc_Camera_CameraServiceTakePhotoSessionBase: ServerSessionUnaryBase<Dronecore_Rpc_Camera_TakePhotoRequest, Dronecore_Rpc_Camera_TakePhotoResponse>, Dronecore_Rpc_Camera_CameraServiceTakePhotoSession {}

class Dronecore_Rpc_Camera_CameraServiceTakePhotoSessionTestStub: ServerSessionUnaryTestStub, Dronecore_Rpc_Camera_CameraServiceTakePhotoSession {}

internal protocol Dronecore_Rpc_Camera_CameraServiceStartPhotoIntervalSession: ServerSessionUnary {}

fileprivate final class Dronecore_Rpc_Camera_CameraServiceStartPhotoIntervalSessionBase: ServerSessionUnaryBase<Dronecore_Rpc_Camera_StartPhotoIntervalRequest, Dronecore_Rpc_Camera_StartPhotoIntervalResponse>, Dronecore_Rpc_Camera_CameraServiceStartPhotoIntervalSession {}

class Dronecore_Rpc_Camera_CameraServiceStartPhotoIntervalSessionTestStub: ServerSessionUnaryTestStub, Dronecore_Rpc_Camera_CameraServiceStartPhotoIntervalSession {}

internal protocol Dronecore_Rpc_Camera_CameraServiceStopPhotoIntervalSession: ServerSessionUnary {}

fileprivate final class Dronecore_Rpc_Camera_CameraServiceStopPhotoIntervalSessionBase: ServerSessionUnaryBase<Dronecore_Rpc_Camera_StopPhotoIntervalRequest, Dronecore_Rpc_Camera_StopPhotoIntervalResponse>, Dronecore_Rpc_Camera_CameraServiceStopPhotoIntervalSession {}

class Dronecore_Rpc_Camera_CameraServiceStopPhotoIntervalSessionTestStub: ServerSessionUnaryTestStub, Dronecore_Rpc_Camera_CameraServiceStopPhotoIntervalSession {}

internal protocol Dronecore_Rpc_Camera_CameraServiceStartVideoSession: ServerSessionUnary {}

fileprivate final class Dronecore_Rpc_Camera_CameraServiceStartVideoSessionBase: ServerSessionUnaryBase<Dronecore_Rpc_Camera_StartVideoRequest, Dronecore_Rpc_Camera_StartVideoResponse>, Dronecore_Rpc_Camera_CameraServiceStartVideoSession {}

class Dronecore_Rpc_Camera_CameraServiceStartVideoSessionTestStub: ServerSessionUnaryTestStub, Dronecore_Rpc_Camera_CameraServiceStartVideoSession {}

internal protocol Dronecore_Rpc_Camera_CameraServiceStopVideoSession: ServerSessionUnary {}

fileprivate final class Dronecore_Rpc_Camera_CameraServiceStopVideoSessionBase: ServerSessionUnaryBase<Dronecore_Rpc_Camera_StopVideoRequest, Dronecore_Rpc_Camera_StopVideoResponse>, Dronecore_Rpc_Camera_CameraServiceStopVideoSession {}

class Dronecore_Rpc_Camera_CameraServiceStopVideoSessionTestStub: ServerSessionUnaryTestStub, Dronecore_Rpc_Camera_CameraServiceStopVideoSession {}

internal protocol Dronecore_Rpc_Camera_CameraServiceStartVideoStreamingSession: ServerSessionUnary {}

fileprivate final class Dronecore_Rpc_Camera_CameraServiceStartVideoStreamingSessionBase: ServerSessionUnaryBase<Dronecore_Rpc_Camera_StartVideoStreamingRequest, Dronecore_Rpc_Camera_StartVideoStreamingResponse>, Dronecore_Rpc_Camera_CameraServiceStartVideoStreamingSession {}

class Dronecore_Rpc_Camera_CameraServiceStartVideoStreamingSessionTestStub: ServerSessionUnaryTestStub, Dronecore_Rpc_Camera_CameraServiceStartVideoStreamingSession {}

internal protocol Dronecore_Rpc_Camera_CameraServiceStopVideoStreamingSession: ServerSessionUnary {}

fileprivate final class Dronecore_Rpc_Camera_CameraServiceStopVideoStreamingSessionBase: ServerSessionUnaryBase<Dronecore_Rpc_Camera_StopVideoStreamingRequest, Dronecore_Rpc_Camera_StopVideoStreamingResponse>, Dronecore_Rpc_Camera_CameraServiceStopVideoStreamingSession {}

class Dronecore_Rpc_Camera_CameraServiceStopVideoStreamingSessionTestStub: ServerSessionUnaryTestStub, Dronecore_Rpc_Camera_CameraServiceStopVideoStreamingSession {}

internal protocol Dronecore_Rpc_Camera_CameraServiceSetModeSession: ServerSessionUnary {}

fileprivate final class Dronecore_Rpc_Camera_CameraServiceSetModeSessionBase: ServerSessionUnaryBase<Dronecore_Rpc_Camera_SetModeRequest, Dronecore_Rpc_Camera_SetModeResponse>, Dronecore_Rpc_Camera_CameraServiceSetModeSession {}

class Dronecore_Rpc_Camera_CameraServiceSetModeSessionTestStub: ServerSessionUnaryTestStub, Dronecore_Rpc_Camera_CameraServiceSetModeSession {}

internal protocol Dronecore_Rpc_Camera_CameraServiceSubscribeModeSession: ServerSessionServerStreaming {
  /// Send a message. Nonblocking.
  func send(_ response: Dronecore_Rpc_Camera_ModeResponse, completion: ((Bool) -> Void)?) throws
}

fileprivate final class Dronecore_Rpc_Camera_CameraServiceSubscribeModeSessionBase: ServerSessionServerStreamingBase<Dronecore_Rpc_Camera_SubscribeModeRequest, Dronecore_Rpc_Camera_ModeResponse>, Dronecore_Rpc_Camera_CameraServiceSubscribeModeSession {}

class Dronecore_Rpc_Camera_CameraServiceSubscribeModeSessionTestStub: ServerSessionServerStreamingTestStub<Dronecore_Rpc_Camera_ModeResponse>, Dronecore_Rpc_Camera_CameraServiceSubscribeModeSession {}

internal protocol Dronecore_Rpc_Camera_CameraServiceSetVideoStreamSettingsSession: ServerSessionUnary {}

fileprivate final class Dronecore_Rpc_Camera_CameraServiceSetVideoStreamSettingsSessionBase: ServerSessionUnaryBase<Dronecore_Rpc_Camera_SetVideoStreamSettingsRequest, Dronecore_Rpc_Camera_SetVideoStreamSettingsResponse>, Dronecore_Rpc_Camera_CameraServiceSetVideoStreamSettingsSession {}

class Dronecore_Rpc_Camera_CameraServiceSetVideoStreamSettingsSessionTestStub: ServerSessionUnaryTestStub, Dronecore_Rpc_Camera_CameraServiceSetVideoStreamSettingsSession {}

internal protocol Dronecore_Rpc_Camera_CameraServiceSubscribeVideoStreamInfoSession: ServerSessionServerStreaming {
  /// Send a message. Nonblocking.
  func send(_ response: Dronecore_Rpc_Camera_VideoStreamInfoResponse, completion: ((Bool) -> Void)?) throws
}

fileprivate final class Dronecore_Rpc_Camera_CameraServiceSubscribeVideoStreamInfoSessionBase: ServerSessionServerStreamingBase<Dronecore_Rpc_Camera_SubscribeVideoStreamInfoRequest, Dronecore_Rpc_Camera_VideoStreamInfoResponse>, Dronecore_Rpc_Camera_CameraServiceSubscribeVideoStreamInfoSession {}

class Dronecore_Rpc_Camera_CameraServiceSubscribeVideoStreamInfoSessionTestStub: ServerSessionServerStreamingTestStub<Dronecore_Rpc_Camera_VideoStreamInfoResponse>, Dronecore_Rpc_Camera_CameraServiceSubscribeVideoStreamInfoSession {}

internal protocol Dronecore_Rpc_Camera_CameraServiceSubscribeCaptureInfoSession: ServerSessionServerStreaming {
  /// Send a message. Nonblocking.
  func send(_ response: Dronecore_Rpc_Camera_CaptureInfoResponse, completion: ((Bool) -> Void)?) throws
}

fileprivate final class Dronecore_Rpc_Camera_CameraServiceSubscribeCaptureInfoSessionBase: ServerSessionServerStreamingBase<Dronecore_Rpc_Camera_SubscribeCaptureInfoRequest, Dronecore_Rpc_Camera_CaptureInfoResponse>, Dronecore_Rpc_Camera_CameraServiceSubscribeCaptureInfoSession {}

class Dronecore_Rpc_Camera_CameraServiceSubscribeCaptureInfoSessionTestStub: ServerSessionServerStreamingTestStub<Dronecore_Rpc_Camera_CaptureInfoResponse>, Dronecore_Rpc_Camera_CameraServiceSubscribeCaptureInfoSession {}

internal protocol Dronecore_Rpc_Camera_CameraServiceGetPossibleSettingsSession: ServerSessionUnary {}

fileprivate final class Dronecore_Rpc_Camera_CameraServiceGetPossibleSettingsSessionBase: ServerSessionUnaryBase<Dronecore_Rpc_Camera_GetPossibleSettingsRequest, Dronecore_Rpc_Camera_GetPossibleSettingsResponse>, Dronecore_Rpc_Camera_CameraServiceGetPossibleSettingsSession {}

class Dronecore_Rpc_Camera_CameraServiceGetPossibleSettingsSessionTestStub: ServerSessionUnaryTestStub, Dronecore_Rpc_Camera_CameraServiceGetPossibleSettingsSession {}

internal protocol Dronecore_Rpc_Camera_CameraServiceSetOptionSession: ServerSessionUnary {}

fileprivate final class Dronecore_Rpc_Camera_CameraServiceSetOptionSessionBase: ServerSessionUnaryBase<Dronecore_Rpc_Camera_SetOptionRequest, Dronecore_Rpc_Camera_SetOptionResponse>, Dronecore_Rpc_Camera_CameraServiceSetOptionSession {}

class Dronecore_Rpc_Camera_CameraServiceSetOptionSessionTestStub: ServerSessionUnaryTestStub, Dronecore_Rpc_Camera_CameraServiceSetOptionSession {}


/// Main server for generated service
internal final class Dronecore_Rpc_Camera_CameraServiceServer: ServiceServer {
  private let provider: Dronecore_Rpc_Camera_CameraServiceProvider

  internal init(address: String, provider: Dronecore_Rpc_Camera_CameraServiceProvider) {
    self.provider = provider
    super.init(address: address)
  }

  internal init?(address: String, certificateURL: URL, keyURL: URL, provider: Dronecore_Rpc_Camera_CameraServiceProvider) {
    self.provider = provider
    super.init(address: address, certificateURL: certificateURL, keyURL: keyURL)
  }

  /// Start the server.
  internal override func handleMethod(_ method: String, handler: Handler, queue: DispatchQueue) throws -> Bool {
    let provider = self.provider
    switch method {
    case "/dronecore.rpc.camera.CameraService/TakePhoto":
      try Dronecore_Rpc_Camera_CameraServiceTakePhotoSessionBase(
        handler: handler,
        providerBlock: { try provider.takephoto(request: $0, session: $1 as! Dronecore_Rpc_Camera_CameraServiceTakePhotoSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecore.rpc.camera.CameraService/StartPhotoInterval":
      try Dronecore_Rpc_Camera_CameraServiceStartPhotoIntervalSessionBase(
        handler: handler,
        providerBlock: { try provider.startphotointerval(request: $0, session: $1 as! Dronecore_Rpc_Camera_CameraServiceStartPhotoIntervalSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecore.rpc.camera.CameraService/StopPhotoInterval":
      try Dronecore_Rpc_Camera_CameraServiceStopPhotoIntervalSessionBase(
        handler: handler,
        providerBlock: { try provider.stopphotointerval(request: $0, session: $1 as! Dronecore_Rpc_Camera_CameraServiceStopPhotoIntervalSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecore.rpc.camera.CameraService/StartVideo":
      try Dronecore_Rpc_Camera_CameraServiceStartVideoSessionBase(
        handler: handler,
        providerBlock: { try provider.startvideo(request: $0, session: $1 as! Dronecore_Rpc_Camera_CameraServiceStartVideoSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecore.rpc.camera.CameraService/StopVideo":
      try Dronecore_Rpc_Camera_CameraServiceStopVideoSessionBase(
        handler: handler,
        providerBlock: { try provider.stopvideo(request: $0, session: $1 as! Dronecore_Rpc_Camera_CameraServiceStopVideoSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecore.rpc.camera.CameraService/StartVideoStreaming":
      try Dronecore_Rpc_Camera_CameraServiceStartVideoStreamingSessionBase(
        handler: handler,
        providerBlock: { try provider.startvideostreaming(request: $0, session: $1 as! Dronecore_Rpc_Camera_CameraServiceStartVideoStreamingSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecore.rpc.camera.CameraService/StopVideoStreaming":
      try Dronecore_Rpc_Camera_CameraServiceStopVideoStreamingSessionBase(
        handler: handler,
        providerBlock: { try provider.stopvideostreaming(request: $0, session: $1 as! Dronecore_Rpc_Camera_CameraServiceStopVideoStreamingSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecore.rpc.camera.CameraService/SetMode":
      try Dronecore_Rpc_Camera_CameraServiceSetModeSessionBase(
        handler: handler,
        providerBlock: { try provider.setmode(request: $0, session: $1 as! Dronecore_Rpc_Camera_CameraServiceSetModeSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecore.rpc.camera.CameraService/SubscribeMode":
      try Dronecore_Rpc_Camera_CameraServiceSubscribeModeSessionBase(
        handler: handler,
        providerBlock: { try provider.subscribemode(request: $0, session: $1 as! Dronecore_Rpc_Camera_CameraServiceSubscribeModeSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecore.rpc.camera.CameraService/SetVideoStreamSettings":
      try Dronecore_Rpc_Camera_CameraServiceSetVideoStreamSettingsSessionBase(
        handler: handler,
        providerBlock: { try provider.setvideostreamsettings(request: $0, session: $1 as! Dronecore_Rpc_Camera_CameraServiceSetVideoStreamSettingsSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecore.rpc.camera.CameraService/SubscribeVideoStreamInfo":
      try Dronecore_Rpc_Camera_CameraServiceSubscribeVideoStreamInfoSessionBase(
        handler: handler,
        providerBlock: { try provider.subscribevideostreaminfo(request: $0, session: $1 as! Dronecore_Rpc_Camera_CameraServiceSubscribeVideoStreamInfoSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecore.rpc.camera.CameraService/SubscribeCaptureInfo":
      try Dronecore_Rpc_Camera_CameraServiceSubscribeCaptureInfoSessionBase(
        handler: handler,
        providerBlock: { try provider.subscribecaptureinfo(request: $0, session: $1 as! Dronecore_Rpc_Camera_CameraServiceSubscribeCaptureInfoSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecore.rpc.camera.CameraService/GetPossibleSettings":
      try Dronecore_Rpc_Camera_CameraServiceGetPossibleSettingsSessionBase(
        handler: handler,
        providerBlock: { try provider.getpossiblesettings(request: $0, session: $1 as! Dronecore_Rpc_Camera_CameraServiceGetPossibleSettingsSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecore.rpc.camera.CameraService/SetOption":
      try Dronecore_Rpc_Camera_CameraServiceSetOptionSessionBase(
        handler: handler,
        providerBlock: { try provider.setoption(request: $0, session: $1 as! Dronecore_Rpc_Camera_CameraServiceSetOptionSessionBase) })
          .run(queue: queue)
      return true
    default:
      return false
    }
  }
}

