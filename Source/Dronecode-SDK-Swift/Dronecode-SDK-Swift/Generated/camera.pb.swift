// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: camera.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Dronecore_Rpc_Camera_CameraMode: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknown // = 0
  case photo // = 1
  case video // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .photo
    case 2: self = .video
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .photo: return 1
    case .video: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

struct Dronecore_Rpc_Camera_TakePhotoRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Dronecore_Rpc_Camera_TakePhotoResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var cameraResult: Dronecore_Rpc_Camera_CameraResult {
    get {return _storage._cameraResult ?? Dronecore_Rpc_Camera_CameraResult()}
    set {_uniqueStorage()._cameraResult = newValue}
  }
  /// Returns true if `cameraResult` has been explicitly set.
  var hasCameraResult: Bool {return _storage._cameraResult != nil}
  /// Clears the value of `cameraResult`. Subsequent reads from it will return its default value.
  mutating func clearCameraResult() {_storage._cameraResult = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Dronecore_Rpc_Camera_StartPhotoIntervalRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var intervalS: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Dronecore_Rpc_Camera_StartPhotoIntervalResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var cameraResult: Dronecore_Rpc_Camera_CameraResult {
    get {return _storage._cameraResult ?? Dronecore_Rpc_Camera_CameraResult()}
    set {_uniqueStorage()._cameraResult = newValue}
  }
  /// Returns true if `cameraResult` has been explicitly set.
  var hasCameraResult: Bool {return _storage._cameraResult != nil}
  /// Clears the value of `cameraResult`. Subsequent reads from it will return its default value.
  mutating func clearCameraResult() {_storage._cameraResult = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Dronecore_Rpc_Camera_StopPhotoIntervalRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Dronecore_Rpc_Camera_StopPhotoIntervalResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var cameraResult: Dronecore_Rpc_Camera_CameraResult {
    get {return _storage._cameraResult ?? Dronecore_Rpc_Camera_CameraResult()}
    set {_uniqueStorage()._cameraResult = newValue}
  }
  /// Returns true if `cameraResult` has been explicitly set.
  var hasCameraResult: Bool {return _storage._cameraResult != nil}
  /// Clears the value of `cameraResult`. Subsequent reads from it will return its default value.
  mutating func clearCameraResult() {_storage._cameraResult = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Dronecore_Rpc_Camera_StartVideoRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Dronecore_Rpc_Camera_StartVideoResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var cameraResult: Dronecore_Rpc_Camera_CameraResult {
    get {return _storage._cameraResult ?? Dronecore_Rpc_Camera_CameraResult()}
    set {_uniqueStorage()._cameraResult = newValue}
  }
  /// Returns true if `cameraResult` has been explicitly set.
  var hasCameraResult: Bool {return _storage._cameraResult != nil}
  /// Clears the value of `cameraResult`. Subsequent reads from it will return its default value.
  mutating func clearCameraResult() {_storage._cameraResult = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Dronecore_Rpc_Camera_StopVideoRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Dronecore_Rpc_Camera_StopVideoResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var cameraResult: Dronecore_Rpc_Camera_CameraResult {
    get {return _storage._cameraResult ?? Dronecore_Rpc_Camera_CameraResult()}
    set {_uniqueStorage()._cameraResult = newValue}
  }
  /// Returns true if `cameraResult` has been explicitly set.
  var hasCameraResult: Bool {return _storage._cameraResult != nil}
  /// Clears the value of `cameraResult`. Subsequent reads from it will return its default value.
  mutating func clearCameraResult() {_storage._cameraResult = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Dronecore_Rpc_Camera_StartVideoStreamingRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Dronecore_Rpc_Camera_StartVideoStreamingResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var cameraResult: Dronecore_Rpc_Camera_CameraResult {
    get {return _storage._cameraResult ?? Dronecore_Rpc_Camera_CameraResult()}
    set {_uniqueStorage()._cameraResult = newValue}
  }
  /// Returns true if `cameraResult` has been explicitly set.
  var hasCameraResult: Bool {return _storage._cameraResult != nil}
  /// Clears the value of `cameraResult`. Subsequent reads from it will return its default value.
  mutating func clearCameraResult() {_storage._cameraResult = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Dronecore_Rpc_Camera_StopVideoStreamingRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Dronecore_Rpc_Camera_StopVideoStreamingResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var cameraResult: Dronecore_Rpc_Camera_CameraResult {
    get {return _storage._cameraResult ?? Dronecore_Rpc_Camera_CameraResult()}
    set {_uniqueStorage()._cameraResult = newValue}
  }
  /// Returns true if `cameraResult` has been explicitly set.
  var hasCameraResult: Bool {return _storage._cameraResult != nil}
  /// Clears the value of `cameraResult`. Subsequent reads from it will return its default value.
  mutating func clearCameraResult() {_storage._cameraResult = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Dronecore_Rpc_Camera_SetModeRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var cameraMode: Dronecore_Rpc_Camera_CameraMode = .unknown

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Dronecore_Rpc_Camera_SetModeResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var cameraResult: Dronecore_Rpc_Camera_CameraResult {
    get {return _storage._cameraResult ?? Dronecore_Rpc_Camera_CameraResult()}
    set {_uniqueStorage()._cameraResult = newValue}
  }
  /// Returns true if `cameraResult` has been explicitly set.
  var hasCameraResult: Bool {return _storage._cameraResult != nil}
  /// Clears the value of `cameraResult`. Subsequent reads from it will return its default value.
  mutating func clearCameraResult() {_storage._cameraResult = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Dronecore_Rpc_Camera_SubscribeModeRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Dronecore_Rpc_Camera_ModeResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var cameraMode: Dronecore_Rpc_Camera_CameraMode = .unknown

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Dronecore_Rpc_Camera_SetVideoStreamSettingsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var videoStreamSettings: Dronecore_Rpc_Camera_VideoStreamSettings {
    get {return _storage._videoStreamSettings ?? Dronecore_Rpc_Camera_VideoStreamSettings()}
    set {_uniqueStorage()._videoStreamSettings = newValue}
  }
  /// Returns true if `videoStreamSettings` has been explicitly set.
  var hasVideoStreamSettings: Bool {return _storage._videoStreamSettings != nil}
  /// Clears the value of `videoStreamSettings`. Subsequent reads from it will return its default value.
  mutating func clearVideoStreamSettings() {_storage._videoStreamSettings = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Dronecore_Rpc_Camera_SetVideoStreamSettingsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Dronecore_Rpc_Camera_SubscribeVideoStreamInfoRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Dronecore_Rpc_Camera_VideoStreamInfoResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var videoStreamInfo: Dronecore_Rpc_Camera_VideoStreamInfo {
    get {return _storage._videoStreamInfo ?? Dronecore_Rpc_Camera_VideoStreamInfo()}
    set {_uniqueStorage()._videoStreamInfo = newValue}
  }
  /// Returns true if `videoStreamInfo` has been explicitly set.
  var hasVideoStreamInfo: Bool {return _storage._videoStreamInfo != nil}
  /// Clears the value of `videoStreamInfo`. Subsequent reads from it will return its default value.
  mutating func clearVideoStreamInfo() {_storage._videoStreamInfo = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Dronecore_Rpc_Camera_SubscribeCaptureInfoRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Dronecore_Rpc_Camera_CaptureInfoResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var captureInfo: Dronecore_Rpc_Camera_CaptureInfo {
    get {return _storage._captureInfo ?? Dronecore_Rpc_Camera_CaptureInfo()}
    set {_uniqueStorage()._captureInfo = newValue}
  }
  /// Returns true if `captureInfo` has been explicitly set.
  var hasCaptureInfo: Bool {return _storage._captureInfo != nil}
  /// Clears the value of `captureInfo`. Subsequent reads from it will return its default value.
  mutating func clearCaptureInfo() {_storage._captureInfo = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Dronecore_Rpc_Camera_SubscribeStatusRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Dronecore_Rpc_Camera_StatusResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: Dronecore_Rpc_Camera_Status {
    get {return _storage._status ?? Dronecore_Rpc_Camera_Status()}
    set {_uniqueStorage()._status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  var hasStatus: Bool {return _storage._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  mutating func clearStatus() {_storage._status = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Dronecore_Rpc_Camera_GetPossibleSettingsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Dronecore_Rpc_Camera_GetPossibleSettingsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var setting: [Dronecore_Rpc_Camera_Setting] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Dronecore_Rpc_Camera_SetOptionRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var settingID: String = String()

  var optionID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Dronecore_Rpc_Camera_SetOptionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var cameraResult: Dronecore_Rpc_Camera_CameraResult {
    get {return _storage._cameraResult ?? Dronecore_Rpc_Camera_CameraResult()}
    set {_uniqueStorage()._cameraResult = newValue}
  }
  /// Returns true if `cameraResult` has been explicitly set.
  var hasCameraResult: Bool {return _storage._cameraResult != nil}
  /// Clears the value of `cameraResult`. Subsequent reads from it will return its default value.
  mutating func clearCameraResult() {_storage._cameraResult = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Dronecore_Rpc_Camera_CameraResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var result: Dronecore_Rpc_Camera_CameraResult.Result = .unknown

  var resultStr: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Result: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unknown // = 0
    case success // = 1
    case inProgress // = 2
    case busy // = 3
    case denied // = 4
    case error // = 5
    case timeout // = 6
    case wrongArgument // = 7
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .success
      case 2: self = .inProgress
      case 3: self = .busy
      case 4: self = .denied
      case 5: self = .error
      case 6: self = .timeout
      case 7: self = .wrongArgument
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .success: return 1
      case .inProgress: return 2
      case .busy: return 3
      case .denied: return 4
      case .error: return 5
      case .timeout: return 6
      case .wrongArgument: return 7
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

struct Dronecore_Rpc_Camera_CaptureInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var position: Dronecore_Rpc_Camera_Position {
    get {return _storage._position ?? Dronecore_Rpc_Camera_Position()}
    set {_uniqueStorage()._position = newValue}
  }
  /// Returns true if `position` has been explicitly set.
  var hasPosition: Bool {return _storage._position != nil}
  /// Clears the value of `position`. Subsequent reads from it will return its default value.
  mutating func clearPosition() {_storage._position = nil}

  var quaternion: Dronecore_Rpc_Camera_Quaternion {
    get {return _storage._quaternion ?? Dronecore_Rpc_Camera_Quaternion()}
    set {_uniqueStorage()._quaternion = newValue}
  }
  /// Returns true if `quaternion` has been explicitly set.
  var hasQuaternion: Bool {return _storage._quaternion != nil}
  /// Clears the value of `quaternion`. Subsequent reads from it will return its default value.
  mutating func clearQuaternion() {_storage._quaternion = nil}

  var timeUtcUs: UInt64 {
    get {return _storage._timeUtcUs}
    set {_uniqueStorage()._timeUtcUs = newValue}
  }

  var isSuccess: Bool {
    get {return _storage._isSuccess}
    set {_uniqueStorage()._isSuccess = newValue}
  }

  var index: Int32 {
    get {return _storage._index}
    set {_uniqueStorage()._index = newValue}
  }

  var fileURL: String {
    get {return _storage._fileURL}
    set {_uniqueStorage()._fileURL = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Dronecore_Rpc_Camera_Position {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var latitudeDeg: Double = 0

  var longitudeDeg: Double = 0

  var absoluteAltitudeM: Float = 0

  var relativeAltitudeM: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Dronecore_Rpc_Camera_Quaternion {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var w: Float = 0

  var x: Float = 0

  var y: Float = 0

  var z: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Dronecore_Rpc_Camera_VideoStreamSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var frameRateHz: Float = 0

  var horizontalResolutionPix: UInt32 = 0

  var verticalResolutionPix: UInt32 = 0

  var bitRateBS: UInt32 = 0

  var rotationDeg: UInt32 = 0

  var uri: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Dronecore_Rpc_Camera_VideoStreamInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var videoStreamSettings: Dronecore_Rpc_Camera_VideoStreamSettings {
    get {return _storage._videoStreamSettings ?? Dronecore_Rpc_Camera_VideoStreamSettings()}
    set {_uniqueStorage()._videoStreamSettings = newValue}
  }
  /// Returns true if `videoStreamSettings` has been explicitly set.
  var hasVideoStreamSettings: Bool {return _storage._videoStreamSettings != nil}
  /// Clears the value of `videoStreamSettings`. Subsequent reads from it will return its default value.
  mutating func clearVideoStreamSettings() {_storage._videoStreamSettings = nil}

  var status: Dronecore_Rpc_Camera_VideoStreamInfo.Status {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Status: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case notRunning // = 0
    case inProgress // = 1
    case UNRECOGNIZED(Int)

    init() {
      self = .notRunning
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .notRunning
      case 1: self = .inProgress
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .notRunning: return 0
      case .inProgress: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Dronecore_Rpc_Camera_Status {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var videoOn: Bool = false

  var photoIntervalOn: Bool = false

  var usedStorageMib: Float = 0

  var availableStorageMib: Float = 0

  var totalStorageMib: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum StorageStatus: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case notAvailable // = 0
    case unformatted // = 1
    case formatted // = 2
    case UNRECOGNIZED(Int)

    init() {
      self = .notAvailable
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .notAvailable
      case 1: self = .unformatted
      case 2: self = .formatted
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .notAvailable: return 0
      case .unformatted: return 1
      case .formatted: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

struct Dronecore_Rpc_Camera_Setting {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var description_p: String = String()

  var option: [Dronecore_Rpc_Camera_Option] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Dronecore_Rpc_Camera_Option {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var description_p: String = String()

  var possibleValue: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "dronecore.rpc.camera"

extension Dronecore_Rpc_Camera_CameraMode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "PHOTO"),
    2: .same(proto: "VIDEO"),
  ]
}

extension Dronecore_Rpc_Camera_TakePhotoRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TakePhotoRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Camera_TakePhotoRequest) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Camera_TakePhotoResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TakePhotoResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "camera_result"),
  ]

  fileprivate class _StorageClass {
    var _cameraResult: Dronecore_Rpc_Camera_CameraResult? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _cameraResult = source._cameraResult
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._cameraResult)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._cameraResult {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Camera_TakePhotoResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._cameraResult != other_storage._cameraResult {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Camera_StartPhotoIntervalRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StartPhotoIntervalRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "interval_s"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFloatField(value: &self.intervalS)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.intervalS != 0 {
      try visitor.visitSingularFloatField(value: self.intervalS, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Camera_StartPhotoIntervalRequest) -> Bool {
    if self.intervalS != other.intervalS {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Camera_StartPhotoIntervalResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StartPhotoIntervalResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "camera_result"),
  ]

  fileprivate class _StorageClass {
    var _cameraResult: Dronecore_Rpc_Camera_CameraResult? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _cameraResult = source._cameraResult
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._cameraResult)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._cameraResult {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Camera_StartPhotoIntervalResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._cameraResult != other_storage._cameraResult {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Camera_StopPhotoIntervalRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StopPhotoIntervalRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Camera_StopPhotoIntervalRequest) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Camera_StopPhotoIntervalResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StopPhotoIntervalResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "camera_result"),
  ]

  fileprivate class _StorageClass {
    var _cameraResult: Dronecore_Rpc_Camera_CameraResult? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _cameraResult = source._cameraResult
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._cameraResult)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._cameraResult {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Camera_StopPhotoIntervalResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._cameraResult != other_storage._cameraResult {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Camera_StartVideoRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StartVideoRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Camera_StartVideoRequest) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Camera_StartVideoResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StartVideoResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "camera_result"),
  ]

  fileprivate class _StorageClass {
    var _cameraResult: Dronecore_Rpc_Camera_CameraResult? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _cameraResult = source._cameraResult
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._cameraResult)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._cameraResult {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Camera_StartVideoResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._cameraResult != other_storage._cameraResult {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Camera_StopVideoRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StopVideoRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Camera_StopVideoRequest) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Camera_StopVideoResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StopVideoResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "camera_result"),
  ]

  fileprivate class _StorageClass {
    var _cameraResult: Dronecore_Rpc_Camera_CameraResult? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _cameraResult = source._cameraResult
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._cameraResult)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._cameraResult {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Camera_StopVideoResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._cameraResult != other_storage._cameraResult {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Camera_StartVideoStreamingRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StartVideoStreamingRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Camera_StartVideoStreamingRequest) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Camera_StartVideoStreamingResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StartVideoStreamingResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "camera_result"),
  ]

  fileprivate class _StorageClass {
    var _cameraResult: Dronecore_Rpc_Camera_CameraResult? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _cameraResult = source._cameraResult
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._cameraResult)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._cameraResult {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Camera_StartVideoStreamingResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._cameraResult != other_storage._cameraResult {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Camera_StopVideoStreamingRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StopVideoStreamingRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Camera_StopVideoStreamingRequest) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Camera_StopVideoStreamingResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StopVideoStreamingResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "camera_result"),
  ]

  fileprivate class _StorageClass {
    var _cameraResult: Dronecore_Rpc_Camera_CameraResult? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _cameraResult = source._cameraResult
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._cameraResult)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._cameraResult {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Camera_StopVideoStreamingResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._cameraResult != other_storage._cameraResult {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Camera_SetModeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetModeRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "camera_mode"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.cameraMode)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.cameraMode != .unknown {
      try visitor.visitSingularEnumField(value: self.cameraMode, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Camera_SetModeRequest) -> Bool {
    if self.cameraMode != other.cameraMode {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Camera_SetModeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetModeResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "camera_result"),
  ]

  fileprivate class _StorageClass {
    var _cameraResult: Dronecore_Rpc_Camera_CameraResult? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _cameraResult = source._cameraResult
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._cameraResult)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._cameraResult {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Camera_SetModeResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._cameraResult != other_storage._cameraResult {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Camera_SubscribeModeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubscribeModeRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Camera_SubscribeModeRequest) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Camera_ModeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ModeResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "camera_mode"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.cameraMode)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.cameraMode != .unknown {
      try visitor.visitSingularEnumField(value: self.cameraMode, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Camera_ModeResponse) -> Bool {
    if self.cameraMode != other.cameraMode {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Camera_SetVideoStreamSettingsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetVideoStreamSettingsRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "video_stream_settings"),
  ]

  fileprivate class _StorageClass {
    var _videoStreamSettings: Dronecore_Rpc_Camera_VideoStreamSettings? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _videoStreamSettings = source._videoStreamSettings
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._videoStreamSettings)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._videoStreamSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Camera_SetVideoStreamSettingsRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._videoStreamSettings != other_storage._videoStreamSettings {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Camera_SetVideoStreamSettingsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetVideoStreamSettingsResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Camera_SetVideoStreamSettingsResponse) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Camera_SubscribeVideoStreamInfoRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubscribeVideoStreamInfoRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Camera_SubscribeVideoStreamInfoRequest) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Camera_VideoStreamInfoResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VideoStreamInfoResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "video_stream_info"),
  ]

  fileprivate class _StorageClass {
    var _videoStreamInfo: Dronecore_Rpc_Camera_VideoStreamInfo? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _videoStreamInfo = source._videoStreamInfo
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._videoStreamInfo)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._videoStreamInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Camera_VideoStreamInfoResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._videoStreamInfo != other_storage._videoStreamInfo {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Camera_SubscribeCaptureInfoRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubscribeCaptureInfoRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Camera_SubscribeCaptureInfoRequest) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Camera_CaptureInfoResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CaptureInfoResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "capture_info"),
  ]

  fileprivate class _StorageClass {
    var _captureInfo: Dronecore_Rpc_Camera_CaptureInfo? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _captureInfo = source._captureInfo
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._captureInfo)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._captureInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Camera_CaptureInfoResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._captureInfo != other_storage._captureInfo {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Camera_SubscribeStatusRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubscribeStatusRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Camera_SubscribeStatusRequest) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Camera_StatusResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StatusResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
  ]

  fileprivate class _StorageClass {
    var _status: Dronecore_Rpc_Camera_Status? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._status)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._status {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Camera_StatusResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._status != other_storage._status {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Camera_GetPossibleSettingsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetPossibleSettingsRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Camera_GetPossibleSettingsRequest) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Camera_GetPossibleSettingsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetPossibleSettingsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "setting"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.setting)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.setting.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.setting, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Camera_GetPossibleSettingsResponse) -> Bool {
    if self.setting != other.setting {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Camera_SetOptionRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetOptionRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "setting_id"),
    2: .standard(proto: "option_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.settingID)
      case 2: try decoder.decodeSingularStringField(value: &self.optionID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.settingID.isEmpty {
      try visitor.visitSingularStringField(value: self.settingID, fieldNumber: 1)
    }
    if !self.optionID.isEmpty {
      try visitor.visitSingularStringField(value: self.optionID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Camera_SetOptionRequest) -> Bool {
    if self.settingID != other.settingID {return false}
    if self.optionID != other.optionID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Camera_SetOptionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetOptionResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "camera_result"),
  ]

  fileprivate class _StorageClass {
    var _cameraResult: Dronecore_Rpc_Camera_CameraResult? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _cameraResult = source._cameraResult
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._cameraResult)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._cameraResult {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Camera_SetOptionResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._cameraResult != other_storage._cameraResult {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Camera_CameraResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CameraResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
    2: .standard(proto: "result_str"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.result)
      case 2: try decoder.decodeSingularStringField(value: &self.resultStr)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.result != .unknown {
      try visitor.visitSingularEnumField(value: self.result, fieldNumber: 1)
    }
    if !self.resultStr.isEmpty {
      try visitor.visitSingularStringField(value: self.resultStr, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Camera_CameraResult) -> Bool {
    if self.result != other.result {return false}
    if self.resultStr != other.resultStr {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Camera_CameraResult.Result: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "SUCCESS"),
    2: .same(proto: "IN_PROGRESS"),
    3: .same(proto: "BUSY"),
    4: .same(proto: "DENIED"),
    5: .same(proto: "ERROR"),
    6: .same(proto: "TIMEOUT"),
    7: .same(proto: "WRONG_ARGUMENT"),
  ]
}

extension Dronecore_Rpc_Camera_CaptureInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CaptureInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "position"),
    2: .same(proto: "quaternion"),
    3: .standard(proto: "time_utc_us"),
    4: .standard(proto: "is_success"),
    5: .same(proto: "index"),
    6: .standard(proto: "file_url"),
  ]

  fileprivate class _StorageClass {
    var _position: Dronecore_Rpc_Camera_Position? = nil
    var _quaternion: Dronecore_Rpc_Camera_Quaternion? = nil
    var _timeUtcUs: UInt64 = 0
    var _isSuccess: Bool = false
    var _index: Int32 = 0
    var _fileURL: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _position = source._position
      _quaternion = source._quaternion
      _timeUtcUs = source._timeUtcUs
      _isSuccess = source._isSuccess
      _index = source._index
      _fileURL = source._fileURL
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._position)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._quaternion)
        case 3: try decoder.decodeSingularUInt64Field(value: &_storage._timeUtcUs)
        case 4: try decoder.decodeSingularBoolField(value: &_storage._isSuccess)
        case 5: try decoder.decodeSingularInt32Field(value: &_storage._index)
        case 6: try decoder.decodeSingularStringField(value: &_storage._fileURL)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._position {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._quaternion {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._timeUtcUs != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._timeUtcUs, fieldNumber: 3)
      }
      if _storage._isSuccess != false {
        try visitor.visitSingularBoolField(value: _storage._isSuccess, fieldNumber: 4)
      }
      if _storage._index != 0 {
        try visitor.visitSingularInt32Field(value: _storage._index, fieldNumber: 5)
      }
      if !_storage._fileURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._fileURL, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Camera_CaptureInfo) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._position != other_storage._position {return false}
        if _storage._quaternion != other_storage._quaternion {return false}
        if _storage._timeUtcUs != other_storage._timeUtcUs {return false}
        if _storage._isSuccess != other_storage._isSuccess {return false}
        if _storage._index != other_storage._index {return false}
        if _storage._fileURL != other_storage._fileURL {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Camera_Position: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Position"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "latitude_deg"),
    2: .standard(proto: "longitude_deg"),
    3: .standard(proto: "absolute_altitude_m"),
    4: .standard(proto: "relative_altitude_m"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self.latitudeDeg)
      case 2: try decoder.decodeSingularDoubleField(value: &self.longitudeDeg)
      case 3: try decoder.decodeSingularFloatField(value: &self.absoluteAltitudeM)
      case 4: try decoder.decodeSingularFloatField(value: &self.relativeAltitudeM)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.latitudeDeg != 0 {
      try visitor.visitSingularDoubleField(value: self.latitudeDeg, fieldNumber: 1)
    }
    if self.longitudeDeg != 0 {
      try visitor.visitSingularDoubleField(value: self.longitudeDeg, fieldNumber: 2)
    }
    if self.absoluteAltitudeM != 0 {
      try visitor.visitSingularFloatField(value: self.absoluteAltitudeM, fieldNumber: 3)
    }
    if self.relativeAltitudeM != 0 {
      try visitor.visitSingularFloatField(value: self.relativeAltitudeM, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Camera_Position) -> Bool {
    if self.latitudeDeg != other.latitudeDeg {return false}
    if self.longitudeDeg != other.longitudeDeg {return false}
    if self.absoluteAltitudeM != other.absoluteAltitudeM {return false}
    if self.relativeAltitudeM != other.relativeAltitudeM {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Camera_Quaternion: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Quaternion"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "w"),
    2: .same(proto: "x"),
    3: .same(proto: "y"),
    4: .same(proto: "z"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFloatField(value: &self.w)
      case 2: try decoder.decodeSingularFloatField(value: &self.x)
      case 3: try decoder.decodeSingularFloatField(value: &self.y)
      case 4: try decoder.decodeSingularFloatField(value: &self.z)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.w != 0 {
      try visitor.visitSingularFloatField(value: self.w, fieldNumber: 1)
    }
    if self.x != 0 {
      try visitor.visitSingularFloatField(value: self.x, fieldNumber: 2)
    }
    if self.y != 0 {
      try visitor.visitSingularFloatField(value: self.y, fieldNumber: 3)
    }
    if self.z != 0 {
      try visitor.visitSingularFloatField(value: self.z, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Camera_Quaternion) -> Bool {
    if self.w != other.w {return false}
    if self.x != other.x {return false}
    if self.y != other.y {return false}
    if self.z != other.z {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Camera_VideoStreamSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VideoStreamSettings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "frame_rate_hz"),
    2: .standard(proto: "horizontal_resolution_pix"),
    3: .standard(proto: "vertical_resolution_pix"),
    4: .standard(proto: "bit_rate_b_s"),
    5: .standard(proto: "rotation_deg"),
    6: .same(proto: "uri"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFloatField(value: &self.frameRateHz)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.horizontalResolutionPix)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.verticalResolutionPix)
      case 4: try decoder.decodeSingularUInt32Field(value: &self.bitRateBS)
      case 5: try decoder.decodeSingularUInt32Field(value: &self.rotationDeg)
      case 6: try decoder.decodeSingularStringField(value: &self.uri)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.frameRateHz != 0 {
      try visitor.visitSingularFloatField(value: self.frameRateHz, fieldNumber: 1)
    }
    if self.horizontalResolutionPix != 0 {
      try visitor.visitSingularUInt32Field(value: self.horizontalResolutionPix, fieldNumber: 2)
    }
    if self.verticalResolutionPix != 0 {
      try visitor.visitSingularUInt32Field(value: self.verticalResolutionPix, fieldNumber: 3)
    }
    if self.bitRateBS != 0 {
      try visitor.visitSingularUInt32Field(value: self.bitRateBS, fieldNumber: 4)
    }
    if self.rotationDeg != 0 {
      try visitor.visitSingularUInt32Field(value: self.rotationDeg, fieldNumber: 5)
    }
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Camera_VideoStreamSettings) -> Bool {
    if self.frameRateHz != other.frameRateHz {return false}
    if self.horizontalResolutionPix != other.horizontalResolutionPix {return false}
    if self.verticalResolutionPix != other.verticalResolutionPix {return false}
    if self.bitRateBS != other.bitRateBS {return false}
    if self.rotationDeg != other.rotationDeg {return false}
    if self.uri != other.uri {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Camera_VideoStreamInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VideoStreamInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "video_stream_settings"),
    2: .same(proto: "status"),
  ]

  fileprivate class _StorageClass {
    var _videoStreamSettings: Dronecore_Rpc_Camera_VideoStreamSettings? = nil
    var _status: Dronecore_Rpc_Camera_VideoStreamInfo.Status = .notRunning

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _videoStreamSettings = source._videoStreamSettings
      _status = source._status
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._videoStreamSettings)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._status)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._videoStreamSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._status != .notRunning {
        try visitor.visitSingularEnumField(value: _storage._status, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Camera_VideoStreamInfo) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._videoStreamSettings != other_storage._videoStreamSettings {return false}
        if _storage._status != other_storage._status {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Camera_VideoStreamInfo.Status: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NOT_RUNNING"),
    1: .same(proto: "IN_PROGRESS"),
  ]
}

extension Dronecore_Rpc_Camera_Status: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Status"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "video_on"),
    2: .standard(proto: "photo_interval_on"),
    3: .standard(proto: "used_storage_mib"),
    4: .standard(proto: "available_storage_mib"),
    5: .standard(proto: "total_storage_mib"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.videoOn)
      case 2: try decoder.decodeSingularBoolField(value: &self.photoIntervalOn)
      case 3: try decoder.decodeSingularFloatField(value: &self.usedStorageMib)
      case 4: try decoder.decodeSingularFloatField(value: &self.availableStorageMib)
      case 5: try decoder.decodeSingularFloatField(value: &self.totalStorageMib)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.videoOn != false {
      try visitor.visitSingularBoolField(value: self.videoOn, fieldNumber: 1)
    }
    if self.photoIntervalOn != false {
      try visitor.visitSingularBoolField(value: self.photoIntervalOn, fieldNumber: 2)
    }
    if self.usedStorageMib != 0 {
      try visitor.visitSingularFloatField(value: self.usedStorageMib, fieldNumber: 3)
    }
    if self.availableStorageMib != 0 {
      try visitor.visitSingularFloatField(value: self.availableStorageMib, fieldNumber: 4)
    }
    if self.totalStorageMib != 0 {
      try visitor.visitSingularFloatField(value: self.totalStorageMib, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Camera_Status) -> Bool {
    if self.videoOn != other.videoOn {return false}
    if self.photoIntervalOn != other.photoIntervalOn {return false}
    if self.usedStorageMib != other.usedStorageMib {return false}
    if self.availableStorageMib != other.availableStorageMib {return false}
    if self.totalStorageMib != other.totalStorageMib {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Camera_Status.StorageStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NOT_AVAILABLE"),
    1: .same(proto: "UNFORMATTED"),
    2: .same(proto: "FORMATTED"),
  ]
}

extension Dronecore_Rpc_Camera_Setting: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Setting"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "description"),
    3: .same(proto: "option"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.option)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.option.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.option, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Camera_Setting) -> Bool {
    if self.id != other.id {return false}
    if self.description_p != other.description_p {return false}
    if self.option != other.option {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Dronecore_Rpc_Camera_Option: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Option"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "description"),
    3: .standard(proto: "possible_value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      case 3: try decoder.decodeRepeatedStringField(value: &self.possibleValue)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.possibleValue.isEmpty {
      try visitor.visitRepeatedStringField(value: self.possibleValue, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Dronecore_Rpc_Camera_Option) -> Bool {
    if self.id != other.id {return false}
    if self.description_p != other.description_p {return false}
    if self.possibleValue != other.possibleValue {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
