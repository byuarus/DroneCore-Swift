//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: mission.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import gRPC
import SwiftProtobuf

internal protocol Dronecore_Rpc_Mission_MissionServiceUploadMissionCall: ClientCallUnary {}

fileprivate final class Dronecore_Rpc_Mission_MissionServiceUploadMissionCallBase: ClientCallUnaryBase<Dronecore_Rpc_Mission_UploadMissionRequest, Dronecore_Rpc_Mission_UploadMissionResponse>, Dronecore_Rpc_Mission_MissionServiceUploadMissionCall {
  override class var method: String { return "/dronecore.rpc.mission.MissionService/UploadMission" }
}

internal protocol Dronecore_Rpc_Mission_MissionServiceDownloadMissionCall: ClientCallUnary {}

fileprivate final class Dronecore_Rpc_Mission_MissionServiceDownloadMissionCallBase: ClientCallUnaryBase<Dronecore_Rpc_Mission_DownloadMissionRequest, Dronecore_Rpc_Mission_DownloadMissionResponse>, Dronecore_Rpc_Mission_MissionServiceDownloadMissionCall {
  override class var method: String { return "/dronecore.rpc.mission.MissionService/DownloadMission" }
}

internal protocol Dronecore_Rpc_Mission_MissionServiceStartMissionCall: ClientCallUnary {}

fileprivate final class Dronecore_Rpc_Mission_MissionServiceStartMissionCallBase: ClientCallUnaryBase<Dronecore_Rpc_Mission_StartMissionRequest, Dronecore_Rpc_Mission_StartMissionResponse>, Dronecore_Rpc_Mission_MissionServiceStartMissionCall {
  override class var method: String { return "/dronecore.rpc.mission.MissionService/StartMission" }
}

internal protocol Dronecore_Rpc_Mission_MissionServicePauseMissionCall: ClientCallUnary {}

fileprivate final class Dronecore_Rpc_Mission_MissionServicePauseMissionCallBase: ClientCallUnaryBase<Dronecore_Rpc_Mission_PauseMissionRequest, Dronecore_Rpc_Mission_PauseMissionResponse>, Dronecore_Rpc_Mission_MissionServicePauseMissionCall {
  override class var method: String { return "/dronecore.rpc.mission.MissionService/PauseMission" }
}

internal protocol Dronecore_Rpc_Mission_MissionServiceSetCurrentMissionItemIndexCall: ClientCallUnary {}

fileprivate final class Dronecore_Rpc_Mission_MissionServiceSetCurrentMissionItemIndexCallBase: ClientCallUnaryBase<Dronecore_Rpc_Mission_SetCurrentMissionItemIndexRequest, Dronecore_Rpc_Mission_SetCurrentMissionItemIndexResponse>, Dronecore_Rpc_Mission_MissionServiceSetCurrentMissionItemIndexCall {
  override class var method: String { return "/dronecore.rpc.mission.MissionService/SetCurrentMissionItemIndex" }
}

internal protocol Dronecore_Rpc_Mission_MissionServiceGetCurrentMissionItemIndexCall: ClientCallUnary {}

fileprivate final class Dronecore_Rpc_Mission_MissionServiceGetCurrentMissionItemIndexCallBase: ClientCallUnaryBase<Dronecore_Rpc_Mission_GetCurrentMissionItemIndexRequest, Dronecore_Rpc_Mission_GetCurrentMissionItemIndexResponse>, Dronecore_Rpc_Mission_MissionServiceGetCurrentMissionItemIndexCall {
  override class var method: String { return "/dronecore.rpc.mission.MissionService/GetCurrentMissionItemIndex" }
}

internal protocol Dronecore_Rpc_Mission_MissionServiceGetMissionCountCall: ClientCallUnary {}

fileprivate final class Dronecore_Rpc_Mission_MissionServiceGetMissionCountCallBase: ClientCallUnaryBase<Dronecore_Rpc_Mission_GetMissionCountRequest, Dronecore_Rpc_Mission_GetMissionCountResponse>, Dronecore_Rpc_Mission_MissionServiceGetMissionCountCall {
  override class var method: String { return "/dronecore.rpc.mission.MissionService/GetMissionCount" }
}

internal protocol Dronecore_Rpc_Mission_MissionServiceIsMissionFinishedCall: ClientCallUnary {}

fileprivate final class Dronecore_Rpc_Mission_MissionServiceIsMissionFinishedCallBase: ClientCallUnaryBase<Dronecore_Rpc_Mission_IsMissionFinishedRequest, Dronecore_Rpc_Mission_IsMissionFinishedResponse>, Dronecore_Rpc_Mission_MissionServiceIsMissionFinishedCall {
  override class var method: String { return "/dronecore.rpc.mission.MissionService/IsMissionFinished" }
}

internal protocol Dronecore_Rpc_Mission_MissionServiceSubscribeMissionProgressCall: ClientCallServerStreaming {
  /// Call this to wait for a result. Blocking.
  func receive() throws -> Dronecore_Rpc_Mission_MissionProgressResponse
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (Dronecore_Rpc_Mission_MissionProgressResponse?, ClientError?) -> Void) throws
}

fileprivate final class Dronecore_Rpc_Mission_MissionServiceSubscribeMissionProgressCallBase: ClientCallServerStreamingBase<Dronecore_Rpc_Mission_SubscribeMissionProgressRequest, Dronecore_Rpc_Mission_MissionProgressResponse>, Dronecore_Rpc_Mission_MissionServiceSubscribeMissionProgressCall {
  override class var method: String { return "/dronecore.rpc.mission.MissionService/SubscribeMissionProgress" }
}

class Dronecore_Rpc_Mission_MissionServiceSubscribeMissionProgressCallTestStub: ClientCallServerStreamingTestStub<Dronecore_Rpc_Mission_MissionProgressResponse>, Dronecore_Rpc_Mission_MissionServiceSubscribeMissionProgressCall {
  override class var method: String { return "/dronecore.rpc.mission.MissionService/SubscribeMissionProgress" }
}


/// Instantiate Dronecore_Rpc_Mission_MissionServiceServiceClient, then call methods of this protocol to make API calls.
internal protocol Dronecore_Rpc_Mission_MissionServiceService: ServiceClient {
  /// Synchronous. Unary.
  func uploadmission(_ request: Dronecore_Rpc_Mission_UploadMissionRequest) throws -> Dronecore_Rpc_Mission_UploadMissionResponse
  /// Asynchronous. Unary.
  func uploadmission(_ request: Dronecore_Rpc_Mission_UploadMissionRequest, completion: @escaping (Dronecore_Rpc_Mission_UploadMissionResponse?, CallResult) -> Void) throws -> Dronecore_Rpc_Mission_MissionServiceUploadMissionCall

  /// Synchronous. Unary.
  func downloadmission(_ request: Dronecore_Rpc_Mission_DownloadMissionRequest) throws -> Dronecore_Rpc_Mission_DownloadMissionResponse
  /// Asynchronous. Unary.
  func downloadmission(_ request: Dronecore_Rpc_Mission_DownloadMissionRequest, completion: @escaping (Dronecore_Rpc_Mission_DownloadMissionResponse?, CallResult) -> Void) throws -> Dronecore_Rpc_Mission_MissionServiceDownloadMissionCall

  /// Synchronous. Unary.
  func startmission(_ request: Dronecore_Rpc_Mission_StartMissionRequest) throws -> Dronecore_Rpc_Mission_StartMissionResponse
  /// Asynchronous. Unary.
  func startmission(_ request: Dronecore_Rpc_Mission_StartMissionRequest, completion: @escaping (Dronecore_Rpc_Mission_StartMissionResponse?, CallResult) -> Void) throws -> Dronecore_Rpc_Mission_MissionServiceStartMissionCall

  /// Synchronous. Unary.
  func pausemission(_ request: Dronecore_Rpc_Mission_PauseMissionRequest) throws -> Dronecore_Rpc_Mission_PauseMissionResponse
  /// Asynchronous. Unary.
  func pausemission(_ request: Dronecore_Rpc_Mission_PauseMissionRequest, completion: @escaping (Dronecore_Rpc_Mission_PauseMissionResponse?, CallResult) -> Void) throws -> Dronecore_Rpc_Mission_MissionServicePauseMissionCall

  /// Synchronous. Unary.
  func setcurrentmissionitemindex(_ request: Dronecore_Rpc_Mission_SetCurrentMissionItemIndexRequest) throws -> Dronecore_Rpc_Mission_SetCurrentMissionItemIndexResponse
  /// Asynchronous. Unary.
  func setcurrentmissionitemindex(_ request: Dronecore_Rpc_Mission_SetCurrentMissionItemIndexRequest, completion: @escaping (Dronecore_Rpc_Mission_SetCurrentMissionItemIndexResponse?, CallResult) -> Void) throws -> Dronecore_Rpc_Mission_MissionServiceSetCurrentMissionItemIndexCall

  /// Synchronous. Unary.
  func getcurrentmissionitemindex(_ request: Dronecore_Rpc_Mission_GetCurrentMissionItemIndexRequest) throws -> Dronecore_Rpc_Mission_GetCurrentMissionItemIndexResponse
  /// Asynchronous. Unary.
  func getcurrentmissionitemindex(_ request: Dronecore_Rpc_Mission_GetCurrentMissionItemIndexRequest, completion: @escaping (Dronecore_Rpc_Mission_GetCurrentMissionItemIndexResponse?, CallResult) -> Void) throws -> Dronecore_Rpc_Mission_MissionServiceGetCurrentMissionItemIndexCall

  /// Synchronous. Unary.
  func getmissioncount(_ request: Dronecore_Rpc_Mission_GetMissionCountRequest) throws -> Dronecore_Rpc_Mission_GetMissionCountResponse
  /// Asynchronous. Unary.
  func getmissioncount(_ request: Dronecore_Rpc_Mission_GetMissionCountRequest, completion: @escaping (Dronecore_Rpc_Mission_GetMissionCountResponse?, CallResult) -> Void) throws -> Dronecore_Rpc_Mission_MissionServiceGetMissionCountCall

  /// Synchronous. Unary.
  func ismissionfinished(_ request: Dronecore_Rpc_Mission_IsMissionFinishedRequest) throws -> Dronecore_Rpc_Mission_IsMissionFinishedResponse
  /// Asynchronous. Unary.
  func ismissionfinished(_ request: Dronecore_Rpc_Mission_IsMissionFinishedRequest, completion: @escaping (Dronecore_Rpc_Mission_IsMissionFinishedResponse?, CallResult) -> Void) throws -> Dronecore_Rpc_Mission_MissionServiceIsMissionFinishedCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribemissionprogress(_ request: Dronecore_Rpc_Mission_SubscribeMissionProgressRequest, completion: ((CallResult) -> Void)?) throws -> Dronecore_Rpc_Mission_MissionServiceSubscribeMissionProgressCall

}

internal final class Dronecore_Rpc_Mission_MissionServiceServiceClient: ServiceClientBase, Dronecore_Rpc_Mission_MissionServiceService {
  /// Synchronous. Unary.
  internal func uploadmission(_ request: Dronecore_Rpc_Mission_UploadMissionRequest) throws -> Dronecore_Rpc_Mission_UploadMissionResponse {
    return try Dronecore_Rpc_Mission_MissionServiceUploadMissionCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func uploadmission(_ request: Dronecore_Rpc_Mission_UploadMissionRequest, completion: @escaping (Dronecore_Rpc_Mission_UploadMissionResponse?, CallResult) -> Void) throws -> Dronecore_Rpc_Mission_MissionServiceUploadMissionCall {
    return try Dronecore_Rpc_Mission_MissionServiceUploadMissionCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func downloadmission(_ request: Dronecore_Rpc_Mission_DownloadMissionRequest) throws -> Dronecore_Rpc_Mission_DownloadMissionResponse {
    return try Dronecore_Rpc_Mission_MissionServiceDownloadMissionCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func downloadmission(_ request: Dronecore_Rpc_Mission_DownloadMissionRequest, completion: @escaping (Dronecore_Rpc_Mission_DownloadMissionResponse?, CallResult) -> Void) throws -> Dronecore_Rpc_Mission_MissionServiceDownloadMissionCall {
    return try Dronecore_Rpc_Mission_MissionServiceDownloadMissionCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func startmission(_ request: Dronecore_Rpc_Mission_StartMissionRequest) throws -> Dronecore_Rpc_Mission_StartMissionResponse {
    return try Dronecore_Rpc_Mission_MissionServiceStartMissionCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func startmission(_ request: Dronecore_Rpc_Mission_StartMissionRequest, completion: @escaping (Dronecore_Rpc_Mission_StartMissionResponse?, CallResult) -> Void) throws -> Dronecore_Rpc_Mission_MissionServiceStartMissionCall {
    return try Dronecore_Rpc_Mission_MissionServiceStartMissionCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func pausemission(_ request: Dronecore_Rpc_Mission_PauseMissionRequest) throws -> Dronecore_Rpc_Mission_PauseMissionResponse {
    return try Dronecore_Rpc_Mission_MissionServicePauseMissionCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func pausemission(_ request: Dronecore_Rpc_Mission_PauseMissionRequest, completion: @escaping (Dronecore_Rpc_Mission_PauseMissionResponse?, CallResult) -> Void) throws -> Dronecore_Rpc_Mission_MissionServicePauseMissionCall {
    return try Dronecore_Rpc_Mission_MissionServicePauseMissionCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func setcurrentmissionitemindex(_ request: Dronecore_Rpc_Mission_SetCurrentMissionItemIndexRequest) throws -> Dronecore_Rpc_Mission_SetCurrentMissionItemIndexResponse {
    return try Dronecore_Rpc_Mission_MissionServiceSetCurrentMissionItemIndexCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func setcurrentmissionitemindex(_ request: Dronecore_Rpc_Mission_SetCurrentMissionItemIndexRequest, completion: @escaping (Dronecore_Rpc_Mission_SetCurrentMissionItemIndexResponse?, CallResult) -> Void) throws -> Dronecore_Rpc_Mission_MissionServiceSetCurrentMissionItemIndexCall {
    return try Dronecore_Rpc_Mission_MissionServiceSetCurrentMissionItemIndexCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func getcurrentmissionitemindex(_ request: Dronecore_Rpc_Mission_GetCurrentMissionItemIndexRequest) throws -> Dronecore_Rpc_Mission_GetCurrentMissionItemIndexResponse {
    return try Dronecore_Rpc_Mission_MissionServiceGetCurrentMissionItemIndexCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func getcurrentmissionitemindex(_ request: Dronecore_Rpc_Mission_GetCurrentMissionItemIndexRequest, completion: @escaping (Dronecore_Rpc_Mission_GetCurrentMissionItemIndexResponse?, CallResult) -> Void) throws -> Dronecore_Rpc_Mission_MissionServiceGetCurrentMissionItemIndexCall {
    return try Dronecore_Rpc_Mission_MissionServiceGetCurrentMissionItemIndexCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func getmissioncount(_ request: Dronecore_Rpc_Mission_GetMissionCountRequest) throws -> Dronecore_Rpc_Mission_GetMissionCountResponse {
    return try Dronecore_Rpc_Mission_MissionServiceGetMissionCountCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func getmissioncount(_ request: Dronecore_Rpc_Mission_GetMissionCountRequest, completion: @escaping (Dronecore_Rpc_Mission_GetMissionCountResponse?, CallResult) -> Void) throws -> Dronecore_Rpc_Mission_MissionServiceGetMissionCountCall {
    return try Dronecore_Rpc_Mission_MissionServiceGetMissionCountCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func ismissionfinished(_ request: Dronecore_Rpc_Mission_IsMissionFinishedRequest) throws -> Dronecore_Rpc_Mission_IsMissionFinishedResponse {
    return try Dronecore_Rpc_Mission_MissionServiceIsMissionFinishedCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func ismissionfinished(_ request: Dronecore_Rpc_Mission_IsMissionFinishedRequest, completion: @escaping (Dronecore_Rpc_Mission_IsMissionFinishedResponse?, CallResult) -> Void) throws -> Dronecore_Rpc_Mission_MissionServiceIsMissionFinishedCall {
    return try Dronecore_Rpc_Mission_MissionServiceIsMissionFinishedCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribemissionprogress(_ request: Dronecore_Rpc_Mission_SubscribeMissionProgressRequest, completion: ((CallResult) -> Void)?) throws -> Dronecore_Rpc_Mission_MissionServiceSubscribeMissionProgressCall {
    return try Dronecore_Rpc_Mission_MissionServiceSubscribeMissionProgressCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

}

class Dronecore_Rpc_Mission_MissionServiceServiceTestStub: ServiceClientTestStubBase, Dronecore_Rpc_Mission_MissionServiceService {
  var uploadmissionRequests: [Dronecore_Rpc_Mission_UploadMissionRequest] = []
  var uploadmissionResponses: [Dronecore_Rpc_Mission_UploadMissionResponse] = []
  func uploadmission(_ request: Dronecore_Rpc_Mission_UploadMissionRequest) throws -> Dronecore_Rpc_Mission_UploadMissionResponse {
    uploadmissionRequests.append(request)
    defer { uploadmissionResponses.removeFirst() }
    return uploadmissionResponses.first!
  }
  func uploadmission(_ request: Dronecore_Rpc_Mission_UploadMissionRequest, completion: @escaping (Dronecore_Rpc_Mission_UploadMissionResponse?, CallResult) -> Void) throws -> Dronecore_Rpc_Mission_MissionServiceUploadMissionCall {
    fatalError("not implemented")
  }

  var downloadmissionRequests: [Dronecore_Rpc_Mission_DownloadMissionRequest] = []
  var downloadmissionResponses: [Dronecore_Rpc_Mission_DownloadMissionResponse] = []
  func downloadmission(_ request: Dronecore_Rpc_Mission_DownloadMissionRequest) throws -> Dronecore_Rpc_Mission_DownloadMissionResponse {
    downloadmissionRequests.append(request)
    defer { downloadmissionResponses.removeFirst() }
    return downloadmissionResponses.first!
  }
  func downloadmission(_ request: Dronecore_Rpc_Mission_DownloadMissionRequest, completion: @escaping (Dronecore_Rpc_Mission_DownloadMissionResponse?, CallResult) -> Void) throws -> Dronecore_Rpc_Mission_MissionServiceDownloadMissionCall {
    fatalError("not implemented")
  }

  var startmissionRequests: [Dronecore_Rpc_Mission_StartMissionRequest] = []
  var startmissionResponses: [Dronecore_Rpc_Mission_StartMissionResponse] = []
  func startmission(_ request: Dronecore_Rpc_Mission_StartMissionRequest) throws -> Dronecore_Rpc_Mission_StartMissionResponse {
    startmissionRequests.append(request)
    defer { startmissionResponses.removeFirst() }
    return startmissionResponses.first!
  }
  func startmission(_ request: Dronecore_Rpc_Mission_StartMissionRequest, completion: @escaping (Dronecore_Rpc_Mission_StartMissionResponse?, CallResult) -> Void) throws -> Dronecore_Rpc_Mission_MissionServiceStartMissionCall {
    fatalError("not implemented")
  }

  var pausemissionRequests: [Dronecore_Rpc_Mission_PauseMissionRequest] = []
  var pausemissionResponses: [Dronecore_Rpc_Mission_PauseMissionResponse] = []
  func pausemission(_ request: Dronecore_Rpc_Mission_PauseMissionRequest) throws -> Dronecore_Rpc_Mission_PauseMissionResponse {
    pausemissionRequests.append(request)
    defer { pausemissionResponses.removeFirst() }
    return pausemissionResponses.first!
  }
  func pausemission(_ request: Dronecore_Rpc_Mission_PauseMissionRequest, completion: @escaping (Dronecore_Rpc_Mission_PauseMissionResponse?, CallResult) -> Void) throws -> Dronecore_Rpc_Mission_MissionServicePauseMissionCall {
    fatalError("not implemented")
  }

  var setcurrentmissionitemindexRequests: [Dronecore_Rpc_Mission_SetCurrentMissionItemIndexRequest] = []
  var setcurrentmissionitemindexResponses: [Dronecore_Rpc_Mission_SetCurrentMissionItemIndexResponse] = []
  func setcurrentmissionitemindex(_ request: Dronecore_Rpc_Mission_SetCurrentMissionItemIndexRequest) throws -> Dronecore_Rpc_Mission_SetCurrentMissionItemIndexResponse {
    setcurrentmissionitemindexRequests.append(request)
    defer { setcurrentmissionitemindexResponses.removeFirst() }
    return setcurrentmissionitemindexResponses.first!
  }
  func setcurrentmissionitemindex(_ request: Dronecore_Rpc_Mission_SetCurrentMissionItemIndexRequest, completion: @escaping (Dronecore_Rpc_Mission_SetCurrentMissionItemIndexResponse?, CallResult) -> Void) throws -> Dronecore_Rpc_Mission_MissionServiceSetCurrentMissionItemIndexCall {
    fatalError("not implemented")
  }

  var getcurrentmissionitemindexRequests: [Dronecore_Rpc_Mission_GetCurrentMissionItemIndexRequest] = []
  var getcurrentmissionitemindexResponses: [Dronecore_Rpc_Mission_GetCurrentMissionItemIndexResponse] = []
  func getcurrentmissionitemindex(_ request: Dronecore_Rpc_Mission_GetCurrentMissionItemIndexRequest) throws -> Dronecore_Rpc_Mission_GetCurrentMissionItemIndexResponse {
    getcurrentmissionitemindexRequests.append(request)
    defer { getcurrentmissionitemindexResponses.removeFirst() }
    return getcurrentmissionitemindexResponses.first!
  }
  func getcurrentmissionitemindex(_ request: Dronecore_Rpc_Mission_GetCurrentMissionItemIndexRequest, completion: @escaping (Dronecore_Rpc_Mission_GetCurrentMissionItemIndexResponse?, CallResult) -> Void) throws -> Dronecore_Rpc_Mission_MissionServiceGetCurrentMissionItemIndexCall {
    fatalError("not implemented")
  }

  var getmissioncountRequests: [Dronecore_Rpc_Mission_GetMissionCountRequest] = []
  var getmissioncountResponses: [Dronecore_Rpc_Mission_GetMissionCountResponse] = []
  func getmissioncount(_ request: Dronecore_Rpc_Mission_GetMissionCountRequest) throws -> Dronecore_Rpc_Mission_GetMissionCountResponse {
    getmissioncountRequests.append(request)
    defer { getmissioncountResponses.removeFirst() }
    return getmissioncountResponses.first!
  }
  func getmissioncount(_ request: Dronecore_Rpc_Mission_GetMissionCountRequest, completion: @escaping (Dronecore_Rpc_Mission_GetMissionCountResponse?, CallResult) -> Void) throws -> Dronecore_Rpc_Mission_MissionServiceGetMissionCountCall {
    fatalError("not implemented")
  }

  var ismissionfinishedRequests: [Dronecore_Rpc_Mission_IsMissionFinishedRequest] = []
  var ismissionfinishedResponses: [Dronecore_Rpc_Mission_IsMissionFinishedResponse] = []
  func ismissionfinished(_ request: Dronecore_Rpc_Mission_IsMissionFinishedRequest) throws -> Dronecore_Rpc_Mission_IsMissionFinishedResponse {
    ismissionfinishedRequests.append(request)
    defer { ismissionfinishedResponses.removeFirst() }
    return ismissionfinishedResponses.first!
  }
  func ismissionfinished(_ request: Dronecore_Rpc_Mission_IsMissionFinishedRequest, completion: @escaping (Dronecore_Rpc_Mission_IsMissionFinishedResponse?, CallResult) -> Void) throws -> Dronecore_Rpc_Mission_MissionServiceIsMissionFinishedCall {
    fatalError("not implemented")
  }

  var subscribemissionprogressRequests: [Dronecore_Rpc_Mission_SubscribeMissionProgressRequest] = []
  var subscribemissionprogressCalls: [Dronecore_Rpc_Mission_MissionServiceSubscribeMissionProgressCall] = []
  func subscribemissionprogress(_ request: Dronecore_Rpc_Mission_SubscribeMissionProgressRequest, completion: ((CallResult) -> Void)?) throws -> Dronecore_Rpc_Mission_MissionServiceSubscribeMissionProgressCall {
    subscribemissionprogressRequests.append(request)
    defer { subscribemissionprogressCalls.removeFirst() }
    return subscribemissionprogressCalls.first!
  }

}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Dronecore_Rpc_Mission_MissionServiceProvider {
  func uploadmission(request: Dronecore_Rpc_Mission_UploadMissionRequest, session: Dronecore_Rpc_Mission_MissionServiceUploadMissionSession) throws -> Dronecore_Rpc_Mission_UploadMissionResponse
  func downloadmission(request: Dronecore_Rpc_Mission_DownloadMissionRequest, session: Dronecore_Rpc_Mission_MissionServiceDownloadMissionSession) throws -> Dronecore_Rpc_Mission_DownloadMissionResponse
  func startmission(request: Dronecore_Rpc_Mission_StartMissionRequest, session: Dronecore_Rpc_Mission_MissionServiceStartMissionSession) throws -> Dronecore_Rpc_Mission_StartMissionResponse
  func pausemission(request: Dronecore_Rpc_Mission_PauseMissionRequest, session: Dronecore_Rpc_Mission_MissionServicePauseMissionSession) throws -> Dronecore_Rpc_Mission_PauseMissionResponse
  func setcurrentmissionitemindex(request: Dronecore_Rpc_Mission_SetCurrentMissionItemIndexRequest, session: Dronecore_Rpc_Mission_MissionServiceSetCurrentMissionItemIndexSession) throws -> Dronecore_Rpc_Mission_SetCurrentMissionItemIndexResponse
  func getcurrentmissionitemindex(request: Dronecore_Rpc_Mission_GetCurrentMissionItemIndexRequest, session: Dronecore_Rpc_Mission_MissionServiceGetCurrentMissionItemIndexSession) throws -> Dronecore_Rpc_Mission_GetCurrentMissionItemIndexResponse
  func getmissioncount(request: Dronecore_Rpc_Mission_GetMissionCountRequest, session: Dronecore_Rpc_Mission_MissionServiceGetMissionCountSession) throws -> Dronecore_Rpc_Mission_GetMissionCountResponse
  func ismissionfinished(request: Dronecore_Rpc_Mission_IsMissionFinishedRequest, session: Dronecore_Rpc_Mission_MissionServiceIsMissionFinishedSession) throws -> Dronecore_Rpc_Mission_IsMissionFinishedResponse
  func subscribemissionprogress(request: Dronecore_Rpc_Mission_SubscribeMissionProgressRequest, session: Dronecore_Rpc_Mission_MissionServiceSubscribeMissionProgressSession) throws
}

internal protocol Dronecore_Rpc_Mission_MissionServiceUploadMissionSession: ServerSessionUnary {}

fileprivate final class Dronecore_Rpc_Mission_MissionServiceUploadMissionSessionBase: ServerSessionUnaryBase<Dronecore_Rpc_Mission_UploadMissionRequest, Dronecore_Rpc_Mission_UploadMissionResponse>, Dronecore_Rpc_Mission_MissionServiceUploadMissionSession {}

class Dronecore_Rpc_Mission_MissionServiceUploadMissionSessionTestStub: ServerSessionUnaryTestStub, Dronecore_Rpc_Mission_MissionServiceUploadMissionSession {}

internal protocol Dronecore_Rpc_Mission_MissionServiceDownloadMissionSession: ServerSessionUnary {}

fileprivate final class Dronecore_Rpc_Mission_MissionServiceDownloadMissionSessionBase: ServerSessionUnaryBase<Dronecore_Rpc_Mission_DownloadMissionRequest, Dronecore_Rpc_Mission_DownloadMissionResponse>, Dronecore_Rpc_Mission_MissionServiceDownloadMissionSession {}

class Dronecore_Rpc_Mission_MissionServiceDownloadMissionSessionTestStub: ServerSessionUnaryTestStub, Dronecore_Rpc_Mission_MissionServiceDownloadMissionSession {}

internal protocol Dronecore_Rpc_Mission_MissionServiceStartMissionSession: ServerSessionUnary {}

fileprivate final class Dronecore_Rpc_Mission_MissionServiceStartMissionSessionBase: ServerSessionUnaryBase<Dronecore_Rpc_Mission_StartMissionRequest, Dronecore_Rpc_Mission_StartMissionResponse>, Dronecore_Rpc_Mission_MissionServiceStartMissionSession {}

class Dronecore_Rpc_Mission_MissionServiceStartMissionSessionTestStub: ServerSessionUnaryTestStub, Dronecore_Rpc_Mission_MissionServiceStartMissionSession {}

internal protocol Dronecore_Rpc_Mission_MissionServicePauseMissionSession: ServerSessionUnary {}

fileprivate final class Dronecore_Rpc_Mission_MissionServicePauseMissionSessionBase: ServerSessionUnaryBase<Dronecore_Rpc_Mission_PauseMissionRequest, Dronecore_Rpc_Mission_PauseMissionResponse>, Dronecore_Rpc_Mission_MissionServicePauseMissionSession {}

class Dronecore_Rpc_Mission_MissionServicePauseMissionSessionTestStub: ServerSessionUnaryTestStub, Dronecore_Rpc_Mission_MissionServicePauseMissionSession {}

internal protocol Dronecore_Rpc_Mission_MissionServiceSetCurrentMissionItemIndexSession: ServerSessionUnary {}

fileprivate final class Dronecore_Rpc_Mission_MissionServiceSetCurrentMissionItemIndexSessionBase: ServerSessionUnaryBase<Dronecore_Rpc_Mission_SetCurrentMissionItemIndexRequest, Dronecore_Rpc_Mission_SetCurrentMissionItemIndexResponse>, Dronecore_Rpc_Mission_MissionServiceSetCurrentMissionItemIndexSession {}

class Dronecore_Rpc_Mission_MissionServiceSetCurrentMissionItemIndexSessionTestStub: ServerSessionUnaryTestStub, Dronecore_Rpc_Mission_MissionServiceSetCurrentMissionItemIndexSession {}

internal protocol Dronecore_Rpc_Mission_MissionServiceGetCurrentMissionItemIndexSession: ServerSessionUnary {}

fileprivate final class Dronecore_Rpc_Mission_MissionServiceGetCurrentMissionItemIndexSessionBase: ServerSessionUnaryBase<Dronecore_Rpc_Mission_GetCurrentMissionItemIndexRequest, Dronecore_Rpc_Mission_GetCurrentMissionItemIndexResponse>, Dronecore_Rpc_Mission_MissionServiceGetCurrentMissionItemIndexSession {}

class Dronecore_Rpc_Mission_MissionServiceGetCurrentMissionItemIndexSessionTestStub: ServerSessionUnaryTestStub, Dronecore_Rpc_Mission_MissionServiceGetCurrentMissionItemIndexSession {}

internal protocol Dronecore_Rpc_Mission_MissionServiceGetMissionCountSession: ServerSessionUnary {}

fileprivate final class Dronecore_Rpc_Mission_MissionServiceGetMissionCountSessionBase: ServerSessionUnaryBase<Dronecore_Rpc_Mission_GetMissionCountRequest, Dronecore_Rpc_Mission_GetMissionCountResponse>, Dronecore_Rpc_Mission_MissionServiceGetMissionCountSession {}

class Dronecore_Rpc_Mission_MissionServiceGetMissionCountSessionTestStub: ServerSessionUnaryTestStub, Dronecore_Rpc_Mission_MissionServiceGetMissionCountSession {}

internal protocol Dronecore_Rpc_Mission_MissionServiceIsMissionFinishedSession: ServerSessionUnary {}

fileprivate final class Dronecore_Rpc_Mission_MissionServiceIsMissionFinishedSessionBase: ServerSessionUnaryBase<Dronecore_Rpc_Mission_IsMissionFinishedRequest, Dronecore_Rpc_Mission_IsMissionFinishedResponse>, Dronecore_Rpc_Mission_MissionServiceIsMissionFinishedSession {}

class Dronecore_Rpc_Mission_MissionServiceIsMissionFinishedSessionTestStub: ServerSessionUnaryTestStub, Dronecore_Rpc_Mission_MissionServiceIsMissionFinishedSession {}

internal protocol Dronecore_Rpc_Mission_MissionServiceSubscribeMissionProgressSession: ServerSessionServerStreaming {
  /// Send a message. Nonblocking.
  func send(_ response: Dronecore_Rpc_Mission_MissionProgressResponse, completion: ((Bool) -> Void)?) throws
}

fileprivate final class Dronecore_Rpc_Mission_MissionServiceSubscribeMissionProgressSessionBase: ServerSessionServerStreamingBase<Dronecore_Rpc_Mission_SubscribeMissionProgressRequest, Dronecore_Rpc_Mission_MissionProgressResponse>, Dronecore_Rpc_Mission_MissionServiceSubscribeMissionProgressSession {}

class Dronecore_Rpc_Mission_MissionServiceSubscribeMissionProgressSessionTestStub: ServerSessionServerStreamingTestStub<Dronecore_Rpc_Mission_MissionProgressResponse>, Dronecore_Rpc_Mission_MissionServiceSubscribeMissionProgressSession {}


/// Main server for generated service
internal final class Dronecore_Rpc_Mission_MissionServiceServer: ServiceServer {
  private let provider: Dronecore_Rpc_Mission_MissionServiceProvider

  internal init(address: String, provider: Dronecore_Rpc_Mission_MissionServiceProvider) {
    self.provider = provider
    super.init(address: address)
  }

  internal init?(address: String, certificateURL: URL, keyURL: URL, provider: Dronecore_Rpc_Mission_MissionServiceProvider) {
    self.provider = provider
    super.init(address: address, certificateURL: certificateURL, keyURL: keyURL)
  }

  /// Start the server.
  internal override func handleMethod(_ method: String, handler: Handler, queue: DispatchQueue) throws -> Bool {
    let provider = self.provider
    switch method {
    case "/dronecore.rpc.mission.MissionService/UploadMission":
      try Dronecore_Rpc_Mission_MissionServiceUploadMissionSessionBase(
        handler: handler,
        providerBlock: { try provider.uploadmission(request: $0, session: $1 as! Dronecore_Rpc_Mission_MissionServiceUploadMissionSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecore.rpc.mission.MissionService/DownloadMission":
      try Dronecore_Rpc_Mission_MissionServiceDownloadMissionSessionBase(
        handler: handler,
        providerBlock: { try provider.downloadmission(request: $0, session: $1 as! Dronecore_Rpc_Mission_MissionServiceDownloadMissionSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecore.rpc.mission.MissionService/StartMission":
      try Dronecore_Rpc_Mission_MissionServiceStartMissionSessionBase(
        handler: handler,
        providerBlock: { try provider.startmission(request: $0, session: $1 as! Dronecore_Rpc_Mission_MissionServiceStartMissionSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecore.rpc.mission.MissionService/PauseMission":
      try Dronecore_Rpc_Mission_MissionServicePauseMissionSessionBase(
        handler: handler,
        providerBlock: { try provider.pausemission(request: $0, session: $1 as! Dronecore_Rpc_Mission_MissionServicePauseMissionSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecore.rpc.mission.MissionService/SetCurrentMissionItemIndex":
      try Dronecore_Rpc_Mission_MissionServiceSetCurrentMissionItemIndexSessionBase(
        handler: handler,
        providerBlock: { try provider.setcurrentmissionitemindex(request: $0, session: $1 as! Dronecore_Rpc_Mission_MissionServiceSetCurrentMissionItemIndexSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecore.rpc.mission.MissionService/GetCurrentMissionItemIndex":
      try Dronecore_Rpc_Mission_MissionServiceGetCurrentMissionItemIndexSessionBase(
        handler: handler,
        providerBlock: { try provider.getcurrentmissionitemindex(request: $0, session: $1 as! Dronecore_Rpc_Mission_MissionServiceGetCurrentMissionItemIndexSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecore.rpc.mission.MissionService/GetMissionCount":
      try Dronecore_Rpc_Mission_MissionServiceGetMissionCountSessionBase(
        handler: handler,
        providerBlock: { try provider.getmissioncount(request: $0, session: $1 as! Dronecore_Rpc_Mission_MissionServiceGetMissionCountSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecore.rpc.mission.MissionService/IsMissionFinished":
      try Dronecore_Rpc_Mission_MissionServiceIsMissionFinishedSessionBase(
        handler: handler,
        providerBlock: { try provider.ismissionfinished(request: $0, session: $1 as! Dronecore_Rpc_Mission_MissionServiceIsMissionFinishedSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecore.rpc.mission.MissionService/SubscribeMissionProgress":
      try Dronecore_Rpc_Mission_MissionServiceSubscribeMissionProgressSessionBase(
        handler: handler,
        providerBlock: { try provider.subscribemissionprogress(request: $0, session: $1 as! Dronecore_Rpc_Mission_MissionServiceSubscribeMissionProgressSessionBase) })
          .run(queue: queue)
      return true
    default:
      return false
    }
  }
}

